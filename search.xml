<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello myblog</title>
    <url>/2023/04/14/Hello-myblog/</url>
    <content><![CDATA[<h1 id="Hello-myblog"><a href="#Hello-myblog" class="headerlink" title="Hello myblog"></a>Hello myblog</h1><h2 id="这是我的发布-水-的第一篇博客，简单纪念一下！！！"><a href="#这是我的发布-水-的第一篇博客，简单纪念一下！！！" class="headerlink" title="这是我的发布(水)的第一篇博客，简单纪念一下！！！"></a>这是我的发布(水)的第一篇博客，简单纪念一下！！！</h2><h2 id="大概花了五天时间搭建并美化了博客，前三天搭建，后两天美化"><a href="#大概花了五天时间搭建并美化了博客，前三天搭建，后两天美化" class="headerlink" title="大概花了五天时间搭建并美化了博客，前三天搭建，后两天美化"></a>大概花了五天时间搭建并美化了博客，前三天搭建，后两天美化</h2><h2 id="下面简单介绍一下-GitHub-Hexo-搭建个人博客的准备吧"><a href="#下面简单介绍一下-GitHub-Hexo-搭建个人博客的准备吧" class="headerlink" title="下面简单介绍一下 GitHub + Hexo 搭建个人博客的准备吧"></a>下面简单介绍一下 GitHub + Hexo 搭建个人博客的准备吧</h2><h3 id="搭建准备"><a href="#搭建准备" class="headerlink" title="搭建准备"></a>搭建准备</h3><ul>
<li>注册Github账号，并搭建仓库（文件托管平台，我们博客目录文件存放的地方）<br><a href="https://github.com/">github地址，点击即可传送</a></li>
<li>下载安装并配置Node.js<br><a href="https://nodejs.org/en/download">Node.js下载地址</a> </li>
<li>下载Git（访问和修改博客的接口）<br><a href="https://git-scm.com/download/win">Git下载地址</a></li>
</ul>
]]></content>
      <categories>
        <category>others</category>
      </categories>
  </entry>
  <entry>
    <title>Java_StringBuffer类</title>
    <url>/2023/06/04/Java-StringBuffer%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="Java常用实用类学习——StringBuffer类"><a href="#Java常用实用类学习——StringBuffer类" class="headerlink" title="Java常用实用类学习——StringBuffer类"></a>Java常用实用类学习——StringBuffer类</h1><p>StringBuffer类与String类不同，StringBuffer类的对象的的实体的内存空间可以自动改变大小，便于存放一个可变的字符序列。尽管String类是Java.lang包中的final类，但该类提供了修改字符序列的方法。</p>
<h2 id="StringBuffer类的对象"><a href="#StringBuffer类的对象" class="headerlink" title="StringBuffer类的对象"></a>StringBuffer类的对象</h2><p>StringBuffer类有3个构造方法</p>
<h3 id="StringBuffer-；"><a href="#StringBuffer-；" class="headerlink" title="StringBuffer()；"></a>StringBuffer()；</h3><p>使用无参的构造方法创建一个StringBuffer对象，那么分配给该对象的实体初始容量可以容纳16个字符，实体容量大于16时，容量自动增加。StringBuffer对象可以通过***length()<em><strong>方法获取实体中存放的字符序列的长度，通过</strong></em>capacity()***方法获取当前实体的实际容量。</p>
<h3 id="StringBuffer-int-size"><a href="#StringBuffer-int-size" class="headerlink" title="StringBuffer(int size);"></a>StringBuffer(int size);</h3><p>使用本构造方法创建一个StringBuffer对象，那么可以分配给该对象的实体初始容量为参数size指定的字符个数，实体容量大于size时，容量自动增加。</p>
<h3 id="StringBuffer-String-s"><a href="#StringBuffer-String-s" class="headerlink" title="StringBuffer(String s);"></a>StringBuffer(String s);</h3><p>使用本构造方法创建一个StringBuffer对象，那么可以分配给该对象的实体初始容量为参数s的字符序列的长度再加16。</p>
<h2 id="StringBuffer类的常用方法"><a href="#StringBuffer类的常用方法" class="headerlink" title="StringBuffer类的常用方法"></a>StringBuffer类的常用方法</h2><h3 id="append"><a href="#append" class="headerlink" title="append();"></a>append();</h3><ul>
<li>StringBuffer append(String s)：</li>
</ul>
<p>将字符串s的字符序列追加到当前StringBuffer对象的字符序列中，并返回当前对象的引用</p>
<ul>
<li>StringBuffer append(int n)：</li>
</ul>
<p>将int型数组n转换为String对象，再将其加入当前StringBuffer对象的字符序列中，并返回当前对象的引用</p>
<ul>
<li>StringBuffer append(Object o)：</li>
</ul>
<p>将一个对象o的字符序列表示追加到当前StringBuffer对象的字符序列中，并返回当前对象的引用</p>
<p>类似的方法还有**StringBuffer append(long n)<strong>、</strong>StringBuffer append(boolean n)<strong>、</strong>StringBuffer append(float n)<strong>、</strong>StringBuffer append(double n)<strong>和</strong>StringBuffer append(char n)**。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">StringBuffer</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;我喜欢&quot;</span>);</span><br><span class="line">s.append(<span class="string">&quot;篮球&quot;</span>);</span><br><span class="line"><span class="comment">//当前s的实体为：我喜欢篮球</span></span><br></pre></td></tr></table></figure>



<h3 id="public-char-charAt-int-n"><a href="#public-char-charAt-int-n" class="headerlink" title="public char charAt(int n);"></a>public char charAt(int n);</h3><p>得到对象的字符序列位置n上的字符</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">StringBuffer</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;我喜欢篮球&quot;</span>);</span><br><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(<span class="number">2</span>);</span><br><span class="line"><span class="comment">//c为：欢</span></span><br></pre></td></tr></table></figure>



<h3 id="public-void-setCharAt-int-n-char-ch"><a href="#public-void-setCharAt-int-n-char-ch" class="headerlink" title="public void setCharAt(int n,char ch);"></a>public void setCharAt(int n,char ch);</h3><p>将对象的字符序列位置n上的字符用参数ch代替</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">StringBuffer</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;我喜欢篮球&quot;</span>);</span><br><span class="line">s.charAt(<span class="number">3</span>，<span class="string">&#x27;足&#x27;</span>);</span><br><span class="line"><span class="comment">//此时s的实体为：我喜欢足球</span></span><br></pre></td></tr></table></figure>



<h3 id="StringBuffer-insert-int-index-String-str"><a href="#StringBuffer-insert-int-index-String-str" class="headerlink" title="StringBuffer insert(int index,String str);"></a>StringBuffer insert(int index,String str);</h3><p>将str插入到index位置，并返回当前对象的引用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">StringBuffer</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;我喜欢篮球&quot;</span>);</span><br><span class="line">s.charAt(<span class="number">3</span>,<span class="string">&quot;唱、跳、rap和&quot;</span>);</span><br><span class="line"><span class="comment">//此时s为：我喜欢唱、跳、rap和篮球</span></span><br></pre></td></tr></table></figure>



<h3 id="public-StringBuffer-reverse"><a href="#public-StringBuffer-reverse" class="headerlink" title="public StringBuffer reverse();"></a>public StringBuffer reverse();</h3><p>将当前对象实体中的字符序列翻转</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">StringBuffer</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;我喜欢篮球&quot;</span>);</span><br><span class="line">s.reverse();</span><br><span class="line"><span class="comment">//此时s为：球蓝欢喜我</span></span><br></pre></td></tr></table></figure>



<h3 id="StringBuffer-delete-int-startIndex-int-endIndex"><a href="#StringBuffer-delete-int-startIndex-int-endIndex" class="headerlink" title="StringBuffer delete(int startIndex,int endIndex);"></a>StringBuffer delete(int startIndex,int endIndex);</h3><p>将当前对象的字符序列中删除一个子字符序列，删除的子字符序列从下标<em><strong>startIndex</strong></em>到<em><strong>endIndex-1</strong></em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">StringBuffer</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;我喜欢篮球&quot;</span>);</span><br><span class="line">s.delete(<span class="number">3</span>,<span class="number">5</span>);</span><br><span class="line"><span class="comment">//此时s为：我喜欢</span></span><br></pre></td></tr></table></figure>



<h3 id="StringBuffer-replace-int-startIndex-int-endIndex-String-str"><a href="#StringBuffer-replace-int-startIndex-int-endIndex-String-str" class="headerlink" title="StringBuffer replace(int startIndex,int endIndex,String str);"></a>StringBuffer replace(int startIndex,int endIndex,String str);</h3><p>将当前对象的字符序列从下标<em><strong>startIndex</strong></em>到<em><strong>endIndex-1</strong></em>替换为参数str</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">StringBuffer</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;我喜欢篮球&quot;</span>);</span><br><span class="line">s.replace(<span class="number">3</span>,<span class="number">5</span>,<span class="string">&quot;足球&quot;</span>);</span><br><span class="line"><span class="comment">//此时s为：我喜欢足球</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Java_String类</title>
    <url>/2023/06/02/Java-String%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="Java常用实用类学习——String类"><a href="#Java常用实用类学习——String类" class="headerlink" title="Java常用实用类学习——String类"></a>Java常用实用类学习——String类</h1><p>String类是java中用于处理字符序列的类。String类在java.lang包中，java把String类定义为final类，用户不能拓展String类，即String类不能有子类。</p>
<h2 id="构造String对象"><a href="#构造String对象" class="headerlink" title="构造String对象"></a>构造String对象</h2><p>String对象习惯地被翻译为字符串对象。</p>
<h3 id="常量对象"><a href="#常量对象" class="headerlink" title="常量对象"></a>常量对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">hi</span> <span class="operator">=</span> <span class="string">&quot;你好&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">hello</span> <span class="operator">=</span> <span class="string">&quot;你好&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>Java把用户程序的String常量都放在常量池，所以hi和hello的引用和实体是相同的</p>
<h3 id="String对象"><a href="#String对象" class="headerlink" title="String对象"></a>String对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>使用String类声明对象并创建对象，凡是new运算符构造构造出的对象都不放在常量池中，所以，尽管s和t的实体是相同（s.equals(t)的值是true），但二者引用不同（ s&#x3D;&#x3D;t 结果是false）。</p>
<p>String类还有两个常见方法</p>
<ol>
<li>String(char a[]);</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> a[] = &#123;<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;i&#x27;</span>&#125;;</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">//相当于</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hi&quot;</span>);</span><br></pre></td></tr></table></figure>



<ol start="2">
<li>String(char a[],int startIndex,int count);</li>
</ol>
<p>提取字符数组a中的一部分字符创建对象，startIndex和count是截取的起始位置和截取长度</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> a[] = &#123;<span class="string">&#x27;你&#x27;</span>,<span class="string">&#x27;好&#x27;</span>,<span class="string">&#x27;呀&#x27;</span>&#125;;</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(a,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//相当于</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;好呀&quot;</span>);</span><br></pre></td></tr></table></figure>



<h3 id="不可变对象"><a href="#不可变对象" class="headerlink" title="不可变对象"></a>不可变对象</h3><p>对象的变量中存储的值不能再发生变化，原因是String是final类，String类也没有给其对象提供修改实体的方法。</p>
<h2 id="String对象的并置"><a href="#String对象的并置" class="headerlink" title="String对象的并置"></a>String对象的并置</h2><p>String对象可以使用”+“进行并置运算，即首尾相接得到一个新的String对象。</p>
<ul>
<li>参与并置运算的String对象中有一个是变量，那么就会得到新的引用和实体</li>
<li>参与并置运算的对象都是常量，那么得到的仍然是常量</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">hello</span> <span class="operator">=</span> <span class="string">&quot;你好&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">testOne</span> <span class="operator">=</span> <span class="string">&quot;你&quot;</span> + <span class="string">&quot;好&quot;</span>;</span><br><span class="line"><span class="comment">//hello、testOne的引用相同，即hello == testOne的结果为true</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">you</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;你&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">hi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;好&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">textTwo</span> <span class="operator">=</span> you + hi;</span><br><span class="line"><span class="comment">//textTwo、testOne的引用不同，即textTwo == testOne的结果为false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="String类的常用方法"><a href="#String类的常用方法" class="headerlink" title="String类的常用方法"></a>String类的常用方法</h2><h3 id="public-int-length"><a href="#public-int-length" class="headerlink" title="public int length();"></a>public int length();</h3><p>String类中的length()方法来获取一个String对象的字符序列的长度。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;戈仑石人&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();      <span class="comment">//n的值为4</span></span><br></pre></td></tr></table></figure>



<h3 id="public-boolean-equals-String-s"><a href="#public-boolean-equals-String-s" class="headerlink" title="public boolean equals(String s);"></a>public boolean equals(String s);</h3><p>调用该方法比较当前String对象的字符序列是否与参数s指定的String对象的字符序列相同（比较实体是否相同）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;加农炮&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;加农炮&quot;</span>);</span><br><span class="line">s1.equals(s2);                    		<span class="comment">//true</span></span><br><span class="line">s1 == s2;						 	 	<span class="comment">//false</span></span><br><span class="line"><span class="comment">//注意“==”和equals(String s)用法的区别。前者比较引用是否相同，后者判断实体是否相同</span></span><br></pre></td></tr></table></figure>





<h3 id="public-boolean-startsWith-String-s"><a href="#public-boolean-startsWith-String-s" class="headerlink" title="public boolean startsWith(String s);"></a>public boolean startsWith(String s);</h3><p>判断当前对象的字符序列前缀是否为参数指定的s</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;每张卡牌生来平等，皇家巨人也不例外&quot;</span>;</span><br><span class="line">s.startsWith(<span class="string">&quot;每张&quot;</span>);                                 <span class="comment">//true</span></span><br><span class="line">s.startsWith(<span class="string">&quot;卡牌&quot;</span>);								 <span class="comment">//false</span></span><br></pre></td></tr></table></figure>



<h3 id="public-boolean-endWith-String-s"><a href="#public-boolean-endWith-String-s" class="headerlink" title="public boolean endWith(String s);"></a>public boolean endWith(String s);</h3><p>判断当前对象的字符序列后缀是否为参数指定的s</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;每张卡牌生来平等，皇家巨人也不例外&quot;</span>;</span><br><span class="line">s.endsWith(<span class="string">&quot;例外&quot;</span>);                                 <span class="comment">//true</span></span><br><span class="line">s.endsWith(<span class="string">&quot;卡牌&quot;</span>);								 <span class="comment">//false</span></span><br></pre></td></tr></table></figure>



<h3 id="public-int-compareTo-String-s"><a href="#public-int-compareTo-String-s" class="headerlink" title="public int compareTo(String s);"></a>public int compareTo(String s);</h3><p>对象调用该方法按字典序与参数s的字符序列比较大小。相同返回0，大于s返回正值，小于s返回负值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;abcde&quot;</span>;</span><br><span class="line">s.compareTo(<span class="string">&quot;boy&quot;</span>);      <span class="comment">//负值</span></span><br><span class="line">s.compareTo(<span class="string">&quot;aba&quot;</span>);      <span class="comment">//正值</span></span><br></pre></td></tr></table></figure>



<h3 id="public-boolean-contains-String-s"><a href="#public-boolean-contains-String-s" class="headerlink" title="public boolean contains(String s);"></a>public boolean contains(String s);</h3><p>判断当前对象中是否包含参数s中的字符序列</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;瓦基丽武神&quot;</span>; </span><br><span class="line">s.contains(<span class="string">&quot;武神&quot;</span>);       <span class="comment">//true</span></span><br><span class="line">s.contains(<span class="string">&quot;丽丽&quot;</span>);		<span class="comment">//false</span></span><br></pre></td></tr></table></figure>



<h3 id="public-int-indexOf-String-s"><a href="#public-int-indexOf-String-s" class="headerlink" title="public int indexOf(String s);"></a>public int indexOf(String s);</h3><p>从0位置开始索引首次出现参数s出现位置，并返回该位置，如果没有检索到则返回-1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;上海自来水来自海上&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.indexOf(<span class="string">&quot;海&quot;</span>);          <span class="comment">//n等于1</span></span><br></pre></td></tr></table></figure>



<h3 id="public-int-lastIndexOf-String-s"><a href="#public-int-lastIndexOf-String-s" class="headerlink" title="public int lastIndexOf(String s);"></a>public int lastIndexOf(String s);</h3><p>从0位置开始索引最后一次出现参数s出现位置，并返回该位置，如果没有检索到则返回-1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;上海自来水来自海上&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.lastIndexOf(<span class="string">&quot;海&quot;</span>);       <span class="comment">//n等于7</span></span><br></pre></td></tr></table></figure>



<h3 id="public-String-substring-int-startpoint"><a href="#public-String-substring-int-startpoint" class="headerlink" title="public String substring(int startpoint);"></a>public String substring(int startpoint);</h3><p>复制从位置startpoint到最后位置上的字符到新的字符序列。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;我喜欢唱、跳、rap、篮球&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> s7.substring(<span class="number">3</span>);           <span class="comment">//s2的字符序列是：唱、跳、rap、篮球</span></span><br></pre></td></tr></table></figure>

<p>PS：substring(int start，int end)为复制从start位置至end-1位置</p>
<h3 id="public-String-trim"><a href="#public-String-trim" class="headerlink" title="public String trim();"></a>public String trim();</h3><p>调用该方法将得到一个新的对象，该对象是当前对象的字符序列<em><strong>去掉前后空格</strong></em>的字符序列</p>
<h2 id="String对象与基本数据的相互转换"><a href="#String对象与基本数据的相互转换" class="headerlink" title="String对象与基本数据的相互转换"></a>String对象与基本数据的相互转换</h2><h3 id="将String转换为基本型"><a href="#将String转换为基本型" class="headerlink" title="将String转换为基本型"></a>将String转换为基本型</h3><p>使用Java.lang包中的<em><strong>Integer</strong></em>类调用其类方法***public static int parseInt(String s)***可以将由”数字“字符组成的字符序列转化为int型数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;1234&quot;</span>;</span><br><span class="line">x = Integer.parseInt(s);</span><br></pre></td></tr></table></figure>

<p>类似，使用java.lang包中的Byte、Short、Long、Float、Double类调用相应的类方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Floatpublic <span class="keyword">static</span> <span class="type">byte</span> <span class="title function_">parseByte</span><span class="params">(String s)</span> <span class="keyword">throws</span> NumberFormatException</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">short</span> <span class="title function_">parseShort</span><span class="params">(String s)</span> <span class="keyword">throws</span> NumberFormatException</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">parseLong</span><span class="params">(String s)</span> <span class="keyword">throws</span> NumberFormatException</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">float</span> <span class="title function_">parseFloat</span><span class="params">(String s)</span> <span class="keyword">throws</span> NumberFormatException</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">parseDouble</span><span class="params">(String s)</span> <span class="keyword">throws</span> NumberFormatException    </span><br></pre></td></tr></table></figure>



<h3 id="将基本型转换为String对象"><a href="#将基本型转换为String对象" class="headerlink" title="将基本型转换为String对象"></a>将基本型转换为String对象</h3><p>可以使用以下String类的类方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">valueOf</span><span class="params">(<span class="type">byte</span> n)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">valueOf</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">valueOf</span><span class="params">(<span class="type">long</span> n)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">valueOf</span><span class="params">(<span class="type">float</span> n)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">valueOf</span><span class="params">(<span class="type">double</span> n)</span>    </span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> String.valueOf(<span class="number">1234</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以用到上面介绍的并置运算，即使用一个空字符串与基本型数据进行并置运算</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span> + <span class="number">1234</span>;</span><br></pre></td></tr></table></figure>



<h3 id="基本型数据的进制表示"><a href="#基本型数据的进制表示" class="headerlink" title="基本型数据的进制表示"></a>基本型数据的进制表示</h3><p>可以把整形数据（例如int、long型数据的二进制、八进制、或十六进制）转换成String对象，即让String对象封装的字符序列是int或long型数据的二进制、八进制或十六进制。</p>
<p>Integer和long类的下列类方法返回整数的进制的String对象表示（负数返回补码），即返回的String对象封装的字符序列是<em><strong>参数的相应进制</strong></em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toBinaryString</span><span class="params">(<span class="type">int</span> i)</span>       <span class="comment">//二进制</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toOctalString</span><span class="params">(<span class="type">int</span> i)</span>		 <span class="comment">//八进制</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toHexString</span><span class="params">(<span class="type">int</span> i)</span>			 <span class="comment">//十六进制</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toBinaryString</span><span class="params">(<span class="type">long</span> i)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toOctalString</span><span class="params">(<span class="type">long</span> i)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">tohexString</span><span class="params">(<span class="type">long</span> i)</span></span><br></pre></td></tr></table></figure>



<h3 id="关于main-方法的参数化"><a href="#关于main-方法的参数化" class="headerlink" title="关于main()方法的参数化"></a>关于main()方法的参数化</h3><p>使用解释器java.exe执行程序来执行主类时，从键盘输入若干字符序列 ，用空格分开，它们分别对应args[0]、args[1]、args[2]……</p>
<h2 id="对象的String表示"><a href="#对象的String表示" class="headerlink" title="对象的String表示"></a>对象的String表示</h2><p>所有的类都默认是java.lang包中Object类的子类或间接子类。Object类有一个public String toString()方法，一个对象调用该方法返回String对象的字符序列的一般形式为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">创建对象的类的名字@对象的引用</span><br><span class="line"></span><br><span class="line">System.out.println(object);</span><br><span class="line">//等价于</span><br><span class="line">System.out,println(object.toString)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Java基础(一)——入门</title>
    <url>/2023/09/08/Java%E5%9F%BA%E7%A1%80(%E4%B8%80)%E2%80%94%E2%80%94%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="初识Java"><a href="#初识Java" class="headerlink" title="初识Java"></a>初识Java</h1><h2 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h2><ul>
<li>Java是美国SUN公司在1995年推出的一门计算机高级编程语言</li>
<li>Java早期称为Oak，后期改名为Java</li>
<li>Java之父：詹姆斯·高斯林 （James Gosling）</li>
<li>2009年sun公司被Oracle公司收购</li>
</ul>
<h2 id="Java用途"><a href="#Java用途" class="headerlink" title="Java用途"></a>Java用途</h2><ul>
<li>桌面应用开发</li>
<li>企业级应用开发</li>
<li>移动应用开发</li>
<li>服务器系统</li>
<li>大数据开发</li>
<li>游戏开发</li>
</ul>
<h2 id="Java技术体系"><a href="#Java技术体系" class="headerlink" title="Java技术体系"></a>Java技术体系</h2><table>
<thead>
<tr>
<th align="center">技术体系</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Java SE（Java Standard Edition）：标准版</td>
<td align="center">Java技术的核心和基础</td>
</tr>
<tr>
<td align="center">Java EE（Java Enterprise Edition）：企业版</td>
<td align="center">企业级应用开发的一套解决方案</td>
</tr>
<tr>
<td align="center">Java ME（Java Micro Edition）：小型版</td>
<td align="center">针对移动应用的解决方案</td>
</tr>
</tbody></table>
<h2 id="JDK的安装与下载"><a href="#JDK的安装与下载" class="headerlink" title="JDK的安装与下载"></a>JDK的安装与下载</h2><ol>
<li>要使用java，必须先在<a href="https://www.oracle.com/cn/java/technologies/downloads/">Oracle官网</a>安装JDK（Java Development Kit），即开发者工具包</li>
<li>最好下载JDK的LTS(长期支持版)版本</li>
<li>在命令行窗口，输入<code>java -version</code>、<code>javac -version</code>看版本号</li>
<li>JDK中最重要的2个命令程序：<ul>
<li>javac：编译工具</li>
<li>java：执行工具</li>
</ul>
</li>
</ol>
<h2 id="DOS窗口常见命令的使用"><a href="#DOS窗口常见命令的使用" class="headerlink" title="DOS窗口常见命令的使用"></a>DOS窗口常见命令的使用</h2><table>
<thead>
<tr>
<th align="center">常用命令</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">D:</td>
<td align="center">切换到某个盘符下：<code>D:</code>、<code>C:</code></td>
</tr>
<tr>
<td align="center">dir</td>
<td align="center">查看当前路径下的文件信息</td>
</tr>
<tr>
<td align="center">cd</td>
<td align="center">进入单级目录：<code>cd 笔记</code>     进入多级目录：<code>d F:\笔记</code>      回退到上级目录：<code>cd..</code>      回退到盘符根目录：<code>cd\  </code></td>
</tr>
<tr>
<td align="center">cls</td>
<td align="center">清屏</td>
</tr>
</tbody></table>
<h2 id="Java程序开发的三个步骤"><a href="#Java程序开发的三个步骤" class="headerlink" title="Java程序开发的三个步骤"></a>Java程序开发的三个步骤</h2><ol>
<li>三个步骤：<ul>
<li>编写代码：</li>
<li>编译代码：使用<code>javac</code>编译，生成后缀名为<code>.class</code>的字节码文件</li>
<li>运行代码</li>
</ul>
</li>
<li>注意事项：<ul>
<li>第一个java程序建议使用记事本书写</li>
<li>建议代码文件全英文，首字母大写，使用驼峰命名法，源代码文件后缀必须是<code>.java</code></li>
<li>文件名称必须与代码的类名称一致</li>
</ul>
</li>
</ol>
<h1 id="JDK的组成、跨平台原理"><a href="#JDK的组成、跨平台原理" class="headerlink" title="JDK的组成、跨平台原理"></a>JDK的组成、跨平台原理</h1><h2 id="JDK组成"><a href="#JDK组成" class="headerlink" title="JDK组成"></a>JDK组成</h2><ul>
<li>JVM（Java Virtual Machine）：java虚拟机，真正运行java程序的地方</li>
<li>核心类库：Java自己写好的程序，给程序员自己的程序调用</li>
<li>JRE（Java Runtime Environment）：Java的运行环境，JVM和核心类库合称JRE</li>
<li>JDK（Java Development Kit）：Java开发工具包，包含上面所有</li>
</ul>
<h2 id="跨平台"><a href="#跨平台" class="headerlink" title="跨平台"></a>跨平台</h2><ul>
<li>Java一次编译、处处可用</li>
<li>Java程序只需要开发一次，就可以在各种安装了JVM的系统平台上运行</li>
</ul>
<h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ol>
<li><p>什么是是注释：</p>
<p>写在程序中对程序进行解释说明的文字</p>
</li>
<li><p>语法：</p>
<ul>
<li>单行注释：<code>// 单行注释</code></li>
<li>多行注释：<code>/* 多行注释 */</code></li>
<li>文档注释：<code>/** 这是文档注释 */</code></li>
</ul>
</li>
<li><p>注释的特点：</p>
<p>不影响程序的执行，编译后的字节码文件已经没有注释了</p>
</li>
<li><p>注释的快捷键：</p>
<p><code>Ctrl + /</code> 对选中的内容进行单行注释</p>
</li>
</ol>
<h2 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h2><ol>
<li><p>什么是字面量：</p>
<p>计算机中用来处理数据的，字面量就是告诉程序员：数据在程序中的书写格式。</p>
</li>
<li><p>常用数据</p>
<table>
<thead>
<tr>
<th align="center">常用数据</th>
<th align="center">写法</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">整数</td>
<td align="center">666，88</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">小数</td>
<td align="center">13.14</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">字符</td>
<td align="center"><code>‘A’</code>、<code>&#39;好&#39;</code></td>
<td align="center">必须使用单引号，有且仅能一个字符</td>
</tr>
<tr>
<td align="center">字符串</td>
<td align="center"><code>&quot;坚持&quot;</code></td>
<td align="center">必须使用双引号，内容可有可无</td>
</tr>
<tr>
<td align="center">布尔值</td>
<td align="center">true、false</td>
<td align="center">只有两个值：true代表真，false代表假</td>
</tr>
<tr>
<td align="center">空值</td>
<td align="center">null</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">转义字符</td>
<td align="center"><code>\n</code>、<code>\t</code></td>
<td align="center"></td>
</tr>
</tbody></table>
</li>
</ol>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ol>
<li><p>变量是什么，完整的定义格式语法</p>
<ul>
<li>变量是用来储存一个数据的，本质是内存中的一块区域</li>
<li>语法：<code>数据类型 变量名称 = 数据;</code></li>
</ul>
</li>
<li><p>为啥要用变量，变量有啥好处？</p>
<p>使用变量记要处理的数据，编写代码更灵活，管理代码更方便</p>
</li>
<li><p>变量特点：变量里面装的数据可以被替换</p>
</li>
<li><p>注意：</p>
<ul>
<li>变量要先声明。才能使用</li>
<li>什么类型的变量，只能储存什么类型的数据</li>
<li>变量存在访问范围，同一个范围内，多个变量的名字不能一样</li>
<li>变量定义时可以不给赋初始值；但在使用时，变量里必须有值。</li>
<li>变量的赋值必须写在方法里面</li>
</ul>
</li>
</ol>
<h2 id="关键字、标识符"><a href="#关键字、标识符" class="headerlink" title="关键字、标识符"></a>关键字、标识符</h2><ol>
<li>关键字：<ul>
<li>关键字就是Java自己要用到的词，并且有特殊含义的一些词。</li>
<li>我们不能将关键字用来做为：类名、变量名，否则会报错</li>
</ul>
</li>
<li>标识符：<ul>
<li>标识符就是名字</li>
<li>标识的规则：由数字、字母、下划线、美元符等组成，且不能数字开头，不能用关键字作为名字</li>
</ul>
</li>
</ol>
<h1 id="变量-1"><a href="#变量-1" class="headerlink" title="变量"></a>变量</h1><h2 id="变量里的数据在计算机中的存储原理"><a href="#变量里的数据在计算机中的存储原理" class="headerlink" title="变量里的数据在计算机中的存储原理"></a>变量里的数据在计算机中的存储原理</h2><ol>
<li><p>数据在计算机底层都是采用二进制存储的</p>
</li>
<li><p>计算机底层表示数据的最小单元时字节，一个字节等于8个二进制位</p>
</li>
<li><p>字符数据在计算机中时怎么存的：</p>
<p>字符存的是ASCII码表中对应的数字的二进制形式</p>
</li>
</ol>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ol>
<li>基本数据类型：4大类8种<ul>
<li>整形：byte、short、int、long</li>
<li>浮点型：float、double</li>
<li>字符型：char</li>
</ul>
</li>
<li>引用数据类型：String</li>
<li>注意：<ul>
<li>定义long类型数据要在数字后面加L&#x2F;l</li>
<li>定义float类型数据要在后面加F&#x2F;f</li>
<li>八进制数据以0开头</li>
<li>十六进制数据以0x开头</li>
</ul>
</li>
</ol>
<h1 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h1><h2 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h2><ol>
<li><p>为什么要进行类型转换？</p>
<p>存在不同类型的变量赋值给其他类型的变量</p>
</li>
<li><p>什么是自动类型转换？</p>
<p>类型范围小的变量，可以直接赋值给范围大的变量</p>
</li>
</ol>
<h2 id="表达式的自动类型转换"><a href="#表达式的自动类型转换" class="headerlink" title="表达式的自动类型转换"></a>表达式的自动类型转换</h2><ol>
<li><p>表达式的自动类型转换是什么样的？</p>
<p>低精度的类型会自动转换成高精度的类型运算</p>
</li>
<li><p>表达式的最终结果类型是由谁决定的？</p>
<p>最终类型由表达式中的最高类型决定</p>
</li>
<li><p>byte、short、char是直接转换成int类型参与运算</p>
</li>
</ol>
<h2 id="强制类型转化"><a href="#强制类型转化" class="headerlink" title="强制类型转化"></a>强制类型转化</h2><ol>
<li>什么是强制类型转换？<ul>
<li>默认情况下，高精度的变量直接赋值给低精度的变量会报错</li>
<li>可以强行将高精度的变量、数据赋值给类型范围小的变量</li>
<li>语法：<code>数据类型 变量 = (数据类型)变量/数据</code></li>
</ul>
</li>
<li>强制类型转换有哪些需要注意的？<ul>
<li>可能出现数据丢失</li>
<li>小数强制转换成整数直接截断小数保留整数</li>
</ul>
</li>
</ol>
<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><ol>
<li><p>基本的算术运算符</p>
<table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">作用</th>
<th align="center">补充</th>
</tr>
</thead>
<tbody><tr>
<td align="center">+</td>
<td align="center">加</td>
<td align="center">除了加法外，”+”还可以用来连接字符串</td>
</tr>
<tr>
<td align="center">-</td>
<td align="center">减</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">*</td>
<td align="center">乘</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">&#x2F;</td>
<td align="center">除</td>
<td align="center">在Java中两个整数相除结果还是整数</td>
</tr>
<tr>
<td align="center">%</td>
<td align="center">取余</td>
<td align="center"></td>
</tr>
</tbody></table>
</li>
<li><p>自增自减运算符：只能操作变量，不能操作字面量</p>
<table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">++</td>
<td align="center">自增，对变量自身的值加1</td>
</tr>
<tr>
<td align="center">–</td>
<td align="center">自减，对变量自身的值减1</td>
</tr>
</tbody></table>
</li>
<li><p>赋值运算符</p>
<ul>
<li>基本运算符：<code>=</code></li>
<li>复合赋值运算符：<code>+=</code>、<code>-=</code>、<code>*=</code>、<code>/=</code>、<code>%=</code></li>
<li>补充：复合赋值运算符自带强制类型转换</li>
</ul>
</li>
<li><p>关系运算符</p>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&#x3D;&#x3D;</td>
<td align="center">判断内容是否相等，满足为True，否则为False</td>
</tr>
<tr>
<td align="center">!&#x3D;</td>
<td align="center">判断内容是否不相等，满足为True，否则为False</td>
</tr>
<tr>
<td align="center">&gt;</td>
<td align="center">判断内容左侧内容是否大于右侧，满足为True，否则为False</td>
</tr>
<tr>
<td align="center">&lt;</td>
<td align="center">判断内容左侧内容是否小于右侧，满足为True，否则为False</td>
</tr>
<tr>
<td align="center">&gt;&#x3D;</td>
<td align="center">判断内容左侧内容是否大于等于右侧，满足为True，否则为False</td>
</tr>
<tr>
<td align="center">&lt;&#x3D;</td>
<td align="center">判断内容左侧内容是否小于等于右侧，满足为True，否则为False</td>
</tr>
</tbody></table>
</li>
<li><p>逻辑运算符</p>
<table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">叫法</th>
<th align="center">运算逻辑</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&amp;</td>
<td align="center">逻辑与</td>
<td align="center">多个条件都需都是true，结果方为true</td>
</tr>
<tr>
<td align="center">|</td>
<td align="center">逻辑或</td>
<td align="center">多个条件有一个是true，结果就是true</td>
</tr>
<tr>
<td align="center">!</td>
<td align="center">逻辑非</td>
<td align="center">取反</td>
</tr>
<tr>
<td align="center">^</td>
<td align="center">逻辑异或</td>
<td align="center">相同为false，不同为false</td>
</tr>
</tbody></table>
<p>注意：</p>
<ul>
<li>&amp;：有一个为false，结果为false</li>
<li>&amp;&amp;：有一个为false，结果为false，但前一个为false后，后一个条件就不执行了</li>
<li>|：有一个为true，结果是true</li>
<li>||：有一个为true，结果是true，但前一个为true后，后一个条件就不执行了</li>
</ul>
</li>
<li><p>三元运算符</p>
<ul>
<li>格式：<code>条件表达式?值1:值2</code></li>
<li>执行流程：首先计算条件表达式的值，如果值为true，返回值1，如果为false，返回值2</li>
</ul>
</li>
</ol>
<h1 id="API介绍、Scanner"><a href="#API介绍、Scanner" class="headerlink" title="API介绍、Scanner"></a>API介绍、Scanner</h1><ol>
<li>API是什么？API文档是什么？<ul>
<li>Application Programming Interface，应用程序编程接口：Java写好的程序，可以直接调用</li>
<li>Java提供的程序使用说明书</li>
</ul>
</li>
<li>Scanner：<ul>
<li>作用：接收用户键盘输入的数据</li>
<li>使用步骤：<ol>
<li>导包：<code>import java.util.Scanner;</code></li>
<li>创建对象：<code>Scanner sc = new Scanner(System in);</code></li>
<li>定义变量接收用户输入的数据：<code>int age = sc.nextInt();</code>、<code>String name = sc.next();</code></li>
</ol>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Markdown语法学习</title>
    <url>/2023/04/22/Markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="Markdown语法学习"><a href="#Markdown语法学习" class="headerlink" title="Markdown语法学习"></a>Markdown语法学习</h1><h2 id="Markdown介绍"><a href="#Markdown介绍" class="headerlink" title="Markdown介绍"></a>Markdown介绍</h2><p>Markdown是一种轻量级标记语言，它使用纯文本格式编写，可通过转换工具将其转换成 HTML、PDF 和其他格式，常用于撰写技术文档、博客、论坛帖子等。它语法简单、清晰易读，可以让写作者更加专注于内容的表达和组织，减少排版和格式化的时间，提高效率和创作体验。</p>
<h2 id="使用工具"><a href="#使用工具" class="headerlink" title="使用工具"></a>使用工具</h2><ul>
<li>VS Code： 轻量级文本编辑器，插件丰富，可拓展性强</li>
<li>Typora：UI简洁，所见即所得</li>
</ul>
<h2 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h2><p>几个”#”即表示几级标签，共六级标题，字体大小依次减小</p>
<p>代码：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"><span class="section">#### 四级标题</span></span><br><span class="line"><span class="section">##### 五级标题</span></span><br><span class="line"><span class="section">###### 六级标题</span></span><br></pre></td></tr></table></figure>

<p>效果展示：</p>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="文本标签"><a href="#文本标签" class="headerlink" title="文本标签"></a>文本标签</h2><h3 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h3><p>代码：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="strong">**加粗内容**</span></span><br></pre></td></tr></table></figure>

<p>效果展示：</p>
<p><strong>加粗内容</strong></p>
<h3 id="倾斜"><a href="#倾斜" class="headerlink" title="倾斜"></a>倾斜</h3><p>代码：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="emphasis">*倾斜内容1*</span></span><br><span class="line"><span class="emphasis">_倾斜内容2_</span></span><br></pre></td></tr></table></figure>

<p>效果展示：</p>
<p><em>倾斜内容1</em></p>
<p><em>倾斜内容2</em></p>
<h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><p>代码：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>下划线<span class="language-xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>效果展示：</p>
<p><u>下划线</u></p>
<h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~~删除~~</span><br></pre></td></tr></table></figure>

<p>效果展示：</p>
<p><del>删除</del></p>
<h3 id="标记（高亮）"><a href="#标记（高亮）" class="headerlink" title="标记（高亮）"></a>标记（高亮）</h3><p>代码：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">==标记==</span><br></pre></td></tr></table></figure>

<p>效果展示：</p>
<p>&#x3D;&#x3D;标记&#x3D;&#x3D;</p>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>代码：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; 引用</span></span><br></pre></td></tr></table></figure>

<p>效果展示</p>
<blockquote>
<p>引用</p>
</blockquote>
<h3 id="上下标"><a href="#上下标" class="headerlink" title="上下标"></a>上下标</h3><p>代码（注意都是双标签，中间夹的为上(下)标内容）：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">m^2^</span><br><span class="line">H~2~O</span><br></pre></td></tr></table></figure>

<p>效果展示：</p>
<p>m^2^</p>
<p>H<del>2</del>O</p>
<h2 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 中国</span><br><span class="line">+ 辽宁</span><br><span class="line">* 沈阳</span><br></pre></td></tr></table></figure>

<p>效果展示：</p>
<ul>
<li>中国<ul>
<li>辽宁<ul>
<li>沈阳</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 尤塞恩·博尔特</span><br><span class="line">2. 约翰·布雷克</span><br><span class="line">3. 泰森·盖伊</span><br></pre></td></tr></table></figure>

<p>效果展示：</p>
<ol>
<li>尤塞恩·博尔特</li>
<li>约翰·布雷克</li>
<li>泰森·盖伊</li>
</ol>
<h3 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h3><p>代码（”-“和”[ ]”之间有三个空格）：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span>   [x] 早饭</span><br><span class="line"><span class="bullet">-</span>   [ ] 午饭</span><br><span class="line"><span class="bullet">-</span>   [ ] 晚饭</span><br></pre></td></tr></table></figure>

<p>效果展示：</p>
<ul>
<li><p><input checked="" disabled="" type="checkbox"> 
早饭</p>
</li>
<li><p><input disabled="" type="checkbox"> 
午饭</p>
</li>
<li><p><input disabled="" type="checkbox"> 
晚饭</p>
</li>
</ul>
<h2 id="公式代码"><a href="#公式代码" class="headerlink" title="公式代码"></a>公式代码</h2><h3 id="行内代码"><a href="#行内代码" class="headerlink" title="行内代码"></a>行内代码</h3><p>代码（在”1”左边，注意要使用英文输入）：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">`int`</span> 整形</span><br></pre></td></tr></table></figure>

<p>效果展示：</p>
<p><code>int</code> 整形</p>
<h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>代码（第一行”&#96;”后面的为语言类型，建议直接使用快捷键）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">````c</span><br><span class="line">void main()&#123;</span><br><span class="line">	……</span><br><span class="line">&#125;</span><br><span class="line">````</span><br></pre></td></tr></table></figure>

<p>效果展示：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="行内公式"><a href="#行内公式" class="headerlink" title="行内公式"></a>行内公式</h3><p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">二倍角公式：$sin2x = 2sinxcosx$ </span><br></pre></td></tr></table></figure>

<p>效果展示：</p>
<p> 二倍角公式：$sin2x &#x3D; 2sinxcosx$ </p>
<h3 id="公式块"><a href="#公式块" class="headerlink" title="公式块"></a>公式块</h3><p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">E_&#123;\rm k&#125; = \frac 1 2 m v^2</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>

<p>效果展示：<br>$$<br>E_{\rm k} &#x3D; \frac 1 2 m v^2<br>$$</p>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|      |   小米   |   vivo   |</span><br><span class="line">| ---- | ---- | ---- |</span><br><span class="line">|   手机   |      |      |</span><br><span class="line">|   平板   |      |      |</span><br></pre></td></tr></table></figure>

<p>效果展示：</p>
<table>
<thead>
<tr>
<th></th>
<th>小米</th>
<th>vivo</th>
</tr>
</thead>
<tbody><tr>
<td>手机</td>
<td></td>
<td></td>
</tr>
<tr>
<td>平板</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[哔哩哔哩](https://www.bilibili.com/)</span><br></pre></td></tr></table></figure>

<p>效果展示：</p>
<p><a href="https://www.bilibili.com/">哔哩哔哩</a></p>
<h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![](图片路径)</span><br></pre></td></tr></table></figure>



<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[^1]</span><br></pre></td></tr></table></figure>



<h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>代码（三个以上减号即可）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">----</span><br></pre></td></tr></table></figure>



<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[TOC]</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
  </entry>
  <entry>
    <title>Python集合(七)——异常、模块与包</title>
    <url>/2023/08/18/Python%E5%9F%BA%E7%A1%80(%E4%B8%83)%E2%80%94%E2%80%94%E5%BC%82%E5%B8%B8%E3%80%81%E6%A8%A1%E5%9D%97%E4%B8%8E%E5%8C%85/</url>
    <content><![CDATA[<h1 id="了解异常"><a href="#了解异常" class="headerlink" title="了解异常"></a>了解异常</h1><ol>
<li><p>异常：</p>
<p>异常就是程序运行的过程中出现了错误</p>
</li>
<li><p>bug：</p>
<p>bug就是异常的意思，因为历史因为小虫子导致计算机失灵，所以延续至今，bug就代表软件出现错误</p>
</li>
</ol>
<h1 id="异常的捕获"><a href="#异常的捕获" class="headerlink" title="异常的捕获"></a>异常的捕获</h1><ol>
<li><p>为什么要捕获异常？</p>
<p>在可能发生异常的地方进行捕获。当发生异常的时候，提供解决方式，而不是任由其导致程序无法运行</p>
</li>
<li><p>捕获异常的语法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    可能要发生异常的语句</span><br><span class="line"><span class="keyword">except</span> [异常 <span class="keyword">as</span> 别名]:</span><br><span class="line">    出现异常的准备手段</span><br><span class="line">[<span class="keyword">else</span>:]</span><br><span class="line">	未出现异常时应做的事情</span><br><span class="line">[<span class="keyword">finally</span>]:</span><br><span class="line">    不管出不出现异常都会做的事情</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 带有中括号的内容可以不写，基础写法就是try-except组合</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>捕获所有异常</p>
<p>异常的种类多种多样，如果想要不管什么类型的异常都能捕获到，那么使用：</p>
<ul>
<li>except:</li>
<li>except Exception:</li>
</ul>
</li>
</ol>
<h1 id="异常的传递"><a href="#异常的传递" class="headerlink" title="异常的传递"></a>异常的传递</h1><p>异常时具有传递性的，当出现异常，且所有函数都没有捕获异常的时候，程序就会报错</p>
<h1 id="Python模块"><a href="#Python模块" class="headerlink" title="Python模块"></a>Python模块</h1><h2 id="模块的导入"><a href="#模块的导入" class="headerlink" title="模块的导入"></a>模块的导入</h2><ol>
<li><p>模块：</p>
<p>模块就是一个Python代码文件，内含类、函数、变量等，我们可以导入进行使用。</p>
</li>
<li><p>导入模块：</p>
<p>语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">from</span> 模块名] <span class="keyword">import</span> [模块 | 类 | 变量 | 函数 | *] [<span class="keyword">as</span> 别名]</span><br></pre></td></tr></table></figure>

<p>演示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">演示Python的模块导入</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用import导入time模块使用sleep功能（函数）</span></span><br><span class="line"><span class="keyword">import</span> time         <span class="comment"># 导入Python内置的time模块（time.py这个代码文件）</span></span><br><span class="line">time.sleep(<span class="number">5</span>)       <span class="comment"># 通过 . 就可以使用模块的功能</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;###########&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用from导入time的sleep功能（函数）</span></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line">sleep(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;###########&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 * 导入time模块的全部功能</span></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> *</span><br><span class="line">sleep(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;###########&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用as给特定功能加上别名</span></span><br><span class="line"><span class="keyword">import</span> time <span class="keyword">as</span> t</span><br><span class="line">t.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep <span class="keyword">as</span> sl</span><br><span class="line">sl(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意事项：</p>
<ul>
<li>from可以省略，直接import即可</li>
<li>as别名可以省略</li>
<li>通过“.”来确定层级关系</li>
<li>模块的导入一般写在代码文件的开头位置</li>
</ul>
</li>
</ol>
<h2 id="自定义模块"><a href="#自定义模块" class="headerlink" title="自定义模块"></a>自定义模块</h2><ol>
<li><p>自定义模块并导入：</p>
<p>在Python代码文件中正常写代码即可，通过import、from关键字和导入Python内置模块一样导入即可使用</p>
</li>
<li><p><code>__mian__</code>变量的功能：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># if __name__ == &#x27;__main__&#x27;:表示，只有当程序时直接执行的才会进入if内部，如果是被导入的，则if无法进入</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>注意事项：</p>
<ul>
<li><p>不同模块，同名功能，如果都被导入，那么后导入的会覆盖先导入的</p>
</li>
<li><p><code>__all__</code>变量可以控制 import* 的哪些功能可以被导入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">a</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">b</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hi&#x27;</span>)</span><br><span class="line"></span><br><span class="line">__all__ = [<span class="string">&#x27;a&#x27;</span>]</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="Python包"><a href="#Python包" class="headerlink" title="Python包"></a>Python包</h1><h2 id="自定义包"><a href="#自定义包" class="headerlink" title="自定义包"></a>自定义包</h2><ol>
<li><p>Python包：</p>
<p>包就是一个文件夹，里面可以存放许多Python模块（代码文件），通过包，在逻辑上将一批模块归为一类，方便使用</p>
</li>
<li><p><code>__init__.py</code>文件作用：</p>
<p>创建包会默认自动创建的文件，通过这个文件表示一个文件夹是Python的包，而非普通的文件夹</p>
</li>
<li><p><code>__all__</code>变量的作用：</p>
<p>同模块，控制import *能够导入的内容</p>
</li>
</ol>
<h2 id="安装第三方包"><a href="#安装第三方包" class="headerlink" title="安装第三方包"></a>安装第三方包</h2><ol>
<li><p>什么是第三方包？有什么作用？</p>
<p>第三方包就是非Python官方内置的包，可以安装他们拓展功能，提高开发效率</p>
</li>
<li><p>如何安装？</p>
<ul>
<li>在命令提示符内：<ul>
<li>pip install 包名称</li>
<li>pip install -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a> 包名称</li>
</ul>
</li>
<li>在PyCharm中安装</li>
</ul>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Python基础(一)——基本数据类型</title>
    <url>/2023/07/13/Python%E5%9F%BA%E7%A1%80(%E4%B8%80)%E2%80%94%E2%80%94%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="初识Python"><a href="#初识Python" class="headerlink" title="初识Python"></a>初识Python</h1><h2 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h2><p>1989年，Guidio van Rossum吉多·范罗苏姆决心开发一个新的解释程序（Python雏形）</p>
<p>1991年，第一个Python解释器诞生，Pyhton名字来自于吉多·范罗苏姆喜欢的电视：<em>Monty Python‘s Flying Circus</em></p>
<h2 id="适用面"><a href="#适用面" class="headerlink" title="适用面"></a>适用面</h2><table>
<thead>
<tr>
<th>人群</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>IT从业者</td>
<td>自动化脚本（运维开发、测试工具等）</td>
</tr>
<tr>
<td>普通白领</td>
<td>自动化办公</td>
</tr>
<tr>
<td>后端开发</td>
<td>WEB应用程序</td>
</tr>
<tr>
<td>科学家基于</td>
<td>基于Python完成数据计算（生物、化学、物理）</td>
</tr>
<tr>
<td>人工智能&#x2F;机器学习</td>
<td>基于Python开发AI程序</td>
</tr>
<tr>
<td>大数据开发</td>
<td>基于Python完成大数据任务开发（Spark、Flink）</td>
</tr>
</tbody></table>
<h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><ul>
<li>Python解释器环境内，执行单行代码</li>
<li>使用Python解释器执行，执行Python代码文件</li>
<li>使用第三方IDE(集成开发工具)，如PyCharm软件、开发Python程序</li>
</ul>
<h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><h2 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h2><p>字面量：在代码中，被写下来的固定值，成为字面量</p>
<p>常用的值的类型：Python中常用的6种值（数据）的类型</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>描述</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>数字（Number）</td>
<td>整数（int）、浮点数（float）、复数（complex）、布尔（bool）</td>
<td></td>
</tr>
<tr>
<td>字符串（Strng）</td>
<td>描述文本的一种数据类型</td>
<td>字符串由任意数量的字符组成</td>
</tr>
<tr>
<td>列表（List）</td>
<td>有序的可变序列</td>
<td>Python中使用在频繁的数据类型，可有序记录一堆数据</td>
</tr>
<tr>
<td>元组（Tuple）</td>
<td>有序的不可变序列</td>
<td>可有序记录一堆不可变的Python数据集合</td>
</tr>
<tr>
<td>集合（Set）</td>
<td>无序不重合集合</td>
<td>可无序记录一堆不重复的Python数据集合</td>
</tr>
<tr>
<td>字典（Dictionary）</td>
<td>无序Key-Value集合</td>
<td>可无序纪律一堆Key-Value型的Python数据集合</td>
</tr>
</tbody></table>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这是注释1，只能单行</span></span><br><span class="line"><span class="string">&quot;&quot;&quot; 这是注释2，可以多行注释 &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>



<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量就是在程序运行时，记录数据的，变量的值可以改变</p>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>目前入门阶段，主要接触三类数据类型</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>描述</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>string</td>
<td>字符串类型</td>
<td>用引号引起来的数据都是字符串</td>
</tr>
<tr>
<td>int</td>
<td>整形（有符号）</td>
<td>数字类型，存放整数</td>
</tr>
<tr>
<td>float</td>
<td>浮点型（有符号）</td>
<td>数字类型，存放小数</td>
</tr>
</tbody></table>
<p>可以使用type()语句查看数据类型：<em><strong>type(被查看类型的数据)</strong></em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用print直接输出类型信息</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="string">&quot;hello&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">666</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">3.1415926</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用变量储存type()语句的结果</span></span><br><span class="line">string_type = <span class="built_in">type</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">int_type = <span class="built_in">type</span>(<span class="number">666</span>)</span><br><span class="line">float_type = <span class="built_in">type</span>(<span class="number">3.1415926</span>)</span><br><span class="line"><span class="built_in">print</span>(string_type)</span><br><span class="line"><span class="built_in">print</span>(int_type)</span><br><span class="line"><span class="built_in">print</span>(float_type)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用type()语句，查看存储的数据类型信息</span></span><br><span class="line">name = <span class="number">2.71828</span></span><br><span class="line">name_type = <span class="built_in">type</span>(name)</span><br><span class="line"><span class="built_in">print</span>(name_type)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">输出结果：</span></span><br><span class="line"><span class="string">&lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;class &#x27;float&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;class &#x27;float&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;class &#x27;float&#x27;&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>python中变量是没有类型的，而变量储存的数据是有类型的</strong></p>
<h2 id="数据类型转化"><a href="#数据类型转化" class="headerlink" title="数据类型转化"></a>数据类型转化</h2><p>数据类型转化使用场景：</p>
<ul>
<li>从文件中读取数字，默认是字符串，我们需要转换成数字类型</li>
<li>input()语句，默认结果是字符串，若需要数字也需要转化</li>
</ul>
<p>………</p>
<p>常见转换语句</p>
<table>
<thead>
<tr>
<th>语句(函数)</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>int(x)</td>
<td>将x转换成一个整数</td>
</tr>
<tr>
<td>float(x)</td>
<td>将x转换成一个浮点数</td>
</tr>
<tr>
<td>str(x)</td>
<td>将x转换成字符串</td>
</tr>
</tbody></table>
<p>PS：同前面的type()语句一样，这三个语句都是带有结果的（返回值），我们可以直接用print输出，或用变量存储返回值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将数字类型转换成字符串类型</span></span><br><span class="line">num_str = <span class="built_in">str</span>(<span class="number">11</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(num_str),num_str)</span><br><span class="line"></span><br><span class="line">float_str = <span class="built_in">str</span>(<span class="number">3.14</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(float_str),float_str)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将字符串转换成数字</span></span><br><span class="line">num1 = <span class="built_in">int</span>(<span class="string">&quot;1234&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(num1),num1)</span><br><span class="line"></span><br><span class="line">num2 = <span class="built_in">float</span>(<span class="string">&quot;11&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(num2),num2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 整数转浮点</span></span><br><span class="line">float_num = <span class="built_in">float</span>(<span class="number">11</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(float_num),float_num)</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>任意类型都可以转换成字符串，但字符串中有数字才可以转换成数字类型</li>
<li>浮点型可以转换成整型，但会精度损失（小数部分丢失）</li>
</ul>
<h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p>在python中，我们可以给许多东西起名字，如</p>
<ul>
<li>变量名字</li>
<li>方法名字</li>
<li>类的名字</li>
</ul>
<p>……</p>
<p>这些名字，我们把它统一的称之为标识符，用来做内容的标识</p>
<p><strong>标识符命名规则</strong></p>
<ul>
<li>只允许使用<strong>英文</strong>，中文（不推荐），<strong>数字</strong>，<strong>下划线</strong>这四种内容</li>
<li>数字不可以开头</li>
<li>区分大小写</li>
<li>不可以使用关键字</li>
</ul>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算数运算符（数学运算符）"><a href="#算数运算符（数学运算符）" class="headerlink" title="算数运算符（数学运算符）"></a>算数运算符（数学运算符）</h3><table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">+</td>
<td align="center">加</td>
</tr>
<tr>
<td align="center">-</td>
<td align="center">减</td>
</tr>
<tr>
<td align="center">*</td>
<td align="center">乘</td>
</tr>
<tr>
<td align="center">&#x2F;</td>
<td align="center">除</td>
</tr>
<tr>
<td align="center">&#x2F;&#x2F;</td>
<td align="center">取整除</td>
</tr>
<tr>
<td align="center">%</td>
<td align="center">取余</td>
</tr>
<tr>
<td align="center">**</td>
<td align="center">指数</td>
</tr>
</tbody></table>
<h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&#x3D;</td>
<td align="center">赋值运算符</td>
</tr>
</tbody></table>
<h3 id="复合赋值运算符"><a href="#复合赋值运算符" class="headerlink" title="复合赋值运算符"></a>复合赋值运算符</h3><table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">描述</th>
<th align="center">实例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">+&#x3D;</td>
<td align="center">加法赋值运算符</td>
<td align="center">c +&#x3D; a等效于c &#x3D; c + a</td>
</tr>
<tr>
<td align="center">-&#x3D;</td>
<td align="center">减法赋值运算符</td>
<td align="center">c -&#x3D; a等效于c &#x3D; c - a</td>
</tr>
<tr>
<td align="center">*&#x3D;</td>
<td align="center">乘法赋值运算符</td>
<td align="center">c *&#x3D; a等效于c &#x3D; c * a</td>
</tr>
<tr>
<td align="center">&#x2F;&#x3D;</td>
<td align="center">除法赋值运算符</td>
<td align="center">c &#x2F;&#x3D; a等效于c &#x3D; c &#x2F; a</td>
</tr>
<tr>
<td align="center">%&#x3D;</td>
<td align="center">取模赋值运算符</td>
<td align="center">c %&#x3D; a等效于c &#x3D; c % a</td>
</tr>
<tr>
<td align="center">**&#x3D;</td>
<td align="center">幂赋值运算符</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">&#x2F;&#x2F;&#x3D;</td>
<td align="center">取整除赋值运算符</td>
<td align="center">c &#x2F;&#x2F;&#x3D; a等效于c &#x3D; c &#x2F;&#x2F; a</td>
</tr>
</tbody></table>
<h2 id="字符串扩展"><a href="#字符串扩展" class="headerlink" title="字符串扩展"></a>字符串扩展</h2><h3 id="三种定义方法"><a href="#三种定义方法" class="headerlink" title="三种定义方法"></a>三种定义方法</h3><p>字符串在python中有多种定义形式</p>
<ol>
<li>单引号定义法：name &#x3D; ‘hello’</li>
<li>双引号定义法：name &#x3D; “hello”</li>
<li>三引号定义法：name &#x3D; “”” hello “””</li>
</ol>
<p>PS：三引号定义法，和多行注释的写法一样，同样支持换行操作。</p>
<p>使用变量接收它，他就是字符串，否则是多行注释</p>
<p>如果想在字符串中使用单引号或双引号：</p>
<ul>
<li>单引号定义法，可以内含双引号</li>
<li>双引号定义法，可以内含单引号</li>
<li>使用转义字符（\）</li>
</ul>
<h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><p>如果我们有多个字符串，可以通过“**+**”将其拼接成一个字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello &quot;</span>+<span class="string">&quot;world&quot;</span>)</span><br><span class="line">str1 = <span class="string">&quot;大家好&quot;</span></span><br><span class="line">str2 = <span class="string">&quot;我用Python&quot;</span></span><br><span class="line"><span class="built_in">print</span>(str1 + <span class="string">&quot;，人生苦短，&quot;</span> + str2)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">输出结果：</span></span><br><span class="line"><span class="string">hello world</span></span><br><span class="line"><span class="string">大家好，人生苦短，我用Python</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>注意：</p>
<p>”+“无法将非字符串类型的数据拼接</p>
<h3 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h3><p>由于拼接字符串变量过多时拼接太麻烦，且字符串无法和数字或其他类型完成拼接，因而引入字符串的格式化</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str1 = <span class="number">64</span></span><br><span class="line">str2 = <span class="number">8</span></span><br><span class="line">message = <span class="string">&quot;%s除以%s等于%s&quot;</span> % (str1,str2,str2)</span><br><span class="line"><span class="built_in">print</span>(message)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">输出结果：</span></span><br><span class="line"><span class="string">64除以8等于8</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>其中的，%s</p>
<ul>
<li>%表示：我要占位</li>
<li>s表示：将变量变成字符串放入占位的地方</li>
</ul>
<p>所以，综合起来的意思就是：我先占个位置，等一会有个变量过来，我把它变成字符串放到占位的位置</p>
<p>注意：多个变量占位，变量要用括号括起来，并且按照占位的顺序填入</p>
<p>Python中最常用的三类占位，用法和上文%s用法类似</p>
<table>
<thead>
<tr>
<th align="center">格式符号</th>
<th align="center">转化</th>
</tr>
</thead>
<tbody><tr>
<td align="center">%s</td>
<td align="center">将内容转化为字符串，放入占位位置</td>
</tr>
<tr>
<td align="center">%d</td>
<td align="center">将内容转化成整数，放入占位位置</td>
</tr>
<tr>
<td align="center">%f</td>
<td align="center">将内容转化成浮点型，放入占位位置</td>
</tr>
</tbody></table>
<h3 id="格式化的精度控制"><a href="#格式化的精度控制" class="headerlink" title="格式化的精度控制"></a>格式化的精度控制</h3><p><strong>字符串格式化-数字精度控制</strong></p>
<p>我们可以使用辅助符号“m.n”来控制数据的宽度和精度</p>
<ul>
<li>m，控制宽度，要求是数字（很少使用），设置的宽度小于数字自身，不生效</li>
<li>.n，控制小数点精度，要求是数字，会进行小数的四舍五入</li>
</ul>
<h3 id="字符串格式化方法2"><a href="#字符串格式化方法2" class="headerlink" title="字符串格式化方法2"></a>字符串格式化方法2</h3><p>语法：</p>
<p>f”内容{变量}”</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str1 = <span class="string">&quot;2023年&quot;</span></span><br><span class="line">str2 = <span class="number">23</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;今年是<span class="subst">&#123;str1&#125;</span>，二十一世纪的第<span class="subst">&#123;str2&#125;</span>年&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">输出结果：</span></span><br><span class="line"><span class="string">今年是2023年，二十一世纪的第23年</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>这种方式不理会类型，不做精度控制，适合对精度没有要求的时候快速使用</p>
<h3 id="对表达式进行格式化"><a href="#对表达式进行格式化" class="headerlink" title="对表达式进行格式化"></a>对表达式进行格式化</h3><p>表达式：一条具有明确<strong>执行结果</strong>的<strong>代码语句</strong></p>
<p>格式化表达式：</p>
<ul>
<li>f”{表达式}”</li>
<li>“ %s \ %d \ %f “ % (表达式)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1 * 1 的结果是：%d&quot;</span> % (<span class="number">1</span> * <span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;1 * 2 的结果是：<span class="subst">&#123;<span class="number">1</span>*<span class="number">2</span>&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;字符串在Python中的类型名是：%s&quot;</span> % <span class="built_in">type</span>(<span class="string">&quot;字符串&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">输出结果：</span></span><br><span class="line"><span class="string">1 * 1 的结果是：1</span></span><br><span class="line"><span class="string">1 * 2 的结果是：2</span></span><br><span class="line"><span class="string">字符串在Python中的类型名是：&lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>在无需使用变量进行数据存储的时候，可以直接格式化表达式简化代码</p>
<h2 id="数据输入"><a href="#数据输入" class="headerlink" title="数据输入"></a>数据输入</h2><p>前面使用print语句输出，在Python中，与之对应还有一个input语句，来获取键盘输入</p>
<ul>
<li>数据输出：print</li>
<li>数据输入：input</li>
</ul>
<p>使用方法：</p>
<ul>
<li>使用input()语句可以从键盘上获取输入</li>
<li>使用一个变量接收（存储）input语句获取的键盘输入数据即可</li>
<li>获取的数据永远都是字符串类型</li>
<li>可以使用：**input(“提示信息”)**，用以在使用输入内容之前显示提示信息</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Python基础(三)——函数</title>
    <url>/2023/08/12/Python%E5%9F%BA%E7%A1%80(%E4%B8%89)%E2%80%94%E2%80%94%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h1><ul>
<li>函数是组织好的，可重复使用的，用来实现特定功能的代码段，如前面的type()、input()等都是Python的内置函数。</li>
<li>函数可以提高程序的复用性，减少重复性代码，提高开发效率</li>
</ul>
<h1 id="函数的定义和调用"><a href="#函数的定义和调用" class="headerlink" title="函数的定义和调用"></a>函数的定义和调用</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>(<span class="params">传入参数</span>):</span><br><span class="line">    函数体</span><br><span class="line">    <span class="keyword">return</span> 返回值</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数</span></span><br><span class="line">函数名(参数)</span><br></pre></td></tr></table></figure>



<p><strong>注意：</strong></p>
<ul>
<li>参数如果不需要，可以省略</li>
<li>返回值如果不需要，可以省略</li>
<li>函数必须先定义后使用</li>
</ul>
<h1 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h1><p>传入参数的功能是：在函数进行计算的时候，接受外部（调用时）提供的数据</p>
<p><strong>语法解析：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x,y</span>):</span><br><span class="line">    result =  x + y</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;x&#125;</span> + <span class="subst">&#123;y&#125;</span>的结果是：<span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数</span></span><br><span class="line">add(<span class="number">5</span>,<span class="number">6</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>函数定义中，提供的x和y，称之为：形式参数（形参），表示函数声明将要使用2个参数，参数直接使用逗号进行分隔</li>
<li>函数调用中，提供的5和6，称之为：实际参数（实参），表示函数执行时真正使用的参数值，传入的时候，按照顺序传入数据，使用逗号分隔</li>
<li>传入参数的数量是不受限制的，可以没有，也可以有多个</li>
</ul>
<h1 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h1><h2 id="返回值的定义"><a href="#返回值的定义" class="headerlink" title="返回值的定义"></a>返回值的定义</h2><p>所谓返回值，就是程序中函数完成事情后，最后给调用者的结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数</span>(<span class="params">参数...</span>):</span><br><span class="line">    函数体</span><br><span class="line">    <span class="keyword">return</span> 返回值</span><br><span class="line"></span><br><span class="line">变量 = 函数(参数)</span><br></pre></td></tr></table></figure>

<p>如上述代码，变量就能接收到函数的返回值</p>
<p>语法就是：通过return关键字，就能向调用者返回数据</p>
<p><strong>注意：</strong>函数体在遇到return后就结束了，所以写在return后的代码不会执行</p>
<h2 id="None类型"><a href="#None类型" class="headerlink" title="None类型"></a>None类型</h2><p>Python中有一个特殊的字面量：None，其类型是：&lt;class ‘NoneType’&gt;，无返回值的函数，实际上就是返回了：None这个字面量</p>
<p>应用场景：</p>
<ul>
<li>用在函数<strong>无返回值</strong>上</li>
<li>用在<strong>if判断</strong>上，在if判断中，None等同于False，一般用在函数中主动返回None，配合if判断做出相关处理</li>
<li>在声明无内容的变量上，<strong>定义变量</strong>时，但暂时不需要变量有具体值，可以用None来代替</li>
</ul>
<p>None在if中的应用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">check_age</span>(<span class="params">age</span>):</span><br><span class="line">    <span class="keyword">if</span> age &gt; <span class="number">18</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;SUCCESS&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">result = check_age(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> result:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;未成年&quot;</span>)</span><br></pre></td></tr></table></figure>



<h1 id="函数说明文档"><a href="#函数说明文档" class="headerlink" title="函数说明文档"></a>函数说明文档</h1><p>顾名思义，就是在函数中写注释函数进行说明解释，帮助更好理解函数的功能</p>
<h1 id="函数的嵌套调用"><a href="#函数的嵌套调用" class="headerlink" title="函数的嵌套调用"></a>函数的嵌套调用</h1><p>所谓函数嵌套调用就是指在一个函数里面调用了另外一个函数，如下所示</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun_b</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---2---&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun_a</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---1---&quot;</span>)</span><br><span class="line"></span><br><span class="line">    fun_b()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---3---&quot;</span>)</span><br><span class="line"></span><br><span class="line">fun_a()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">本段代码在fun_a中调用了fun_b</span></span><br><span class="line"><span class="string">运行结果：</span></span><br><span class="line"><span class="string">---1---</span></span><br><span class="line"><span class="string">---2---</span></span><br><span class="line"><span class="string">---3---</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>



<h1 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h1><ol>
<li>变量主要分为局部变量和全局变量</li>
<li>局部变量：定义在函数体内的局部变量，即只在函数体内部生效</li>
<li>全局变量：在函数体内、外都能生效的变量</li>
<li>在函数内部定义一个与全局变量同名的变量，并对其运算，对全局变量无影响</li>
<li>在函数内部声明全局变量，需要使用global关键字</li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Python基础(二)——判断、循环</title>
    <url>/2023/07/14/Python%E5%9F%BA%E7%A1%80(%E4%BA%8C)%E2%80%94%E2%80%94%E5%88%A4%E6%96%AD%E3%80%81%E5%BE%AA%E7%8E%AF/</url>
    <content><![CDATA[<h1 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h1><p>进行逻辑判断是生活中常见的行为，同样，在程序中，进行逻辑判断也是最为基础的功能</p>
<h2 id="布尔类型和比较运算符"><a href="#布尔类型和比较运算符" class="headerlink" title="布尔类型和比较运算符"></a>布尔类型和比较运算符</h2><h3 id="布尔类型的定义"><a href="#布尔类型的定义" class="headerlink" title="布尔类型的定义"></a>布尔类型的定义</h3><p>布尔类型的字面量：</p>
<ul>
<li>True 表示真（是、肯定）</li>
<li>False 表示假（否、否定）</li>
</ul>
<p>定义变量存储布尔类型数据：</p>
<p>变量名称 &#x3D; 布尔类型字面量</p>
<p>布尔类型不仅可以自行定义，也可以使用比较运算符得到布尔类型的结果</p>
<h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&#x3D;&#x3D;</td>
<td align="center">判断内容是否相等，满足为True，否则为False</td>
</tr>
<tr>
<td align="center">!&#x3D;</td>
<td align="center">判断内容是否不相等，满足为True，否则为False</td>
</tr>
<tr>
<td align="center">&gt;</td>
<td align="center">判断内容左侧内容是否大于右侧，满足为True，否则为False</td>
</tr>
<tr>
<td align="center">&lt;</td>
<td align="center">判断内容左侧内容是否小于右侧，满足为True，否则为False</td>
</tr>
<tr>
<td align="center">&gt;&#x3D;</td>
<td align="center">判断内容左侧内容是否大于等于右侧，满足为True，否则为False</td>
</tr>
<tr>
<td align="center">&lt;&#x3D;</td>
<td align="center">判断内容左侧内容是否小于等于右侧，满足为True，否则为False</td>
</tr>
</tbody></table>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bool_1 = <span class="literal">True</span></span><br><span class="line">bool_2 = <span class="literal">False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;bool_1变量内容：<span class="subst">&#123;bool_1&#125;</span>,类型是：<span class="subst">&#123;<span class="built_in">type</span>(bool_1)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;bool_1变量内容：<span class="subst">&#123;bool_2&#125;</span>,类型是：<span class="subst">&#123;<span class="built_in">type</span>(bool_2)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">num_1 = <span class="number">10</span></span><br><span class="line">num_2 = <span class="number">10</span></span><br><span class="line">num_3 = <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;10 == 10 的结果：<span class="subst">&#123;num_1 == num_2&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;10 == 100 的结果：<span class="subst">&#123;num_1 == num_3&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">输出结果：</span></span><br><span class="line"><span class="string">bool_1变量内容：True,类型是：&lt;class &#x27;bool&#x27;&gt;</span></span><br><span class="line"><span class="string">bool_1变量内容：False,类型是：&lt;class &#x27;bool&#x27;&gt;</span></span><br><span class="line"><span class="string">10 == 10 的结果：True</span></span><br><span class="line"><span class="string">10 == 100 的结果：False</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>





<h2 id="if语句的基本格式"><a href="#if语句的基本格式" class="headerlink" title="if语句的基本格式"></a>if语句的基本格式</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>if  要判断的条件:</p>
<p>​    条件成立是，要执行的语句</p>
<p><strong>注意</strong>：条件结果一定是布尔类型，条件后面要加<strong>冒号</strong>，归属于if语句的代码块前方要有<strong>四个空格！！！</strong></p>
<h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age = <span class="number">30</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我已经成年了&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;离我的18岁越来越远了&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;时间过得真快呀&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">我已经成年了</span></span><br><span class="line"><span class="string">离我的18岁越来越远了</span></span><br><span class="line"><span class="string">时间过得真快呀</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>



<h2 id="if-else语句"><a href="#if-else语句" class="headerlink" title="if-else语句"></a>if-else语句</h2><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><p>if  条件:</p>
<p>​    满足条件时执行语句1</p>
<p>​	满足条件时执行语句2</p>
<p>else:</p>
<p>​	不满足条件时执行语句1</p>
<p>​    不满足条件时执行语句2</p>
<h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age = <span class="built_in">input</span>(<span class="string">&quot;欢迎来到黑马儿童游乐园，儿童免费，成人收费。\n请输入你的年龄：&quot;</span>)</span><br><span class="line">age = <span class="built_in">int</span>(age)</span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;您已成年，游玩需要补票10元&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;您未成年，可以免费游玩&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;祝您游玩愉快&quot;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="if-elif-else"><a href="#if-elif-else" class="headerlink" title="if-elif-else"></a>if-elif-else</h2><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><p>if  条件1:</p>
<p>​    满足条件1时执行语句1</p>
<p>​	满足条件1时执行语句2</p>
<p>elif 条件2:</p>
<p>​	满足条件2时执行语句1</p>
<p>​    满足条件2时执行语句2</p>
<p>elif 条件N:</p>
<p>​	满足条件N时执行语句1</p>
<p>​    满足条件N时执行语句2</p>
<p>else:</p>
<p>​	不满足所有条件时执行语句1</p>
<p>​    不满足所有条件时执行语句2</p>
<p><strong>注意</strong>：判断是互斥且有顺序的，else可以省略不写，效果等同3个独立的if判断，可以在判断语句中直接写input语句，节省代码量</p>
<h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入第一次猜想的数字：&quot;</span>)) == <span class="number">10</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;恭喜第一次就猜对啦&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;不对，再猜一次：&quot;</span>)) == <span class="number">10</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;猜对啦&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;不对，再猜最后一次：&quot;</span>)) == <span class="number">10</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;猜对啦&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Sorry,全部猜错啦，我想的是：10&quot;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="判断语句的嵌套"><a href="#判断语句的嵌套" class="headerlink" title="判断语句的嵌套"></a>判断语句的嵌套</h2><p>有很多场景，不仅仅是多个并置条件，还会有满足前置条件才会二次判断的多层判断需求，对于这种需求，可以通过判断语句的嵌套</p>
<p><strong>注意：</strong></p>
<ul>
<li>判断语句可以用于多条件，多层次的逻辑判断</li>
<li>嵌套判断语句可以根据需求，自由组合if-elif-else来构建多层次判断</li>
<li>嵌套判断语句，一定要注意空格缩进，Python通过空格缩进来决定层次关系</li>
</ul>
<h1 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h1><p>循环在程序中同判断一样，也是广泛存在的，是非常多功能实现的基础</p>
<h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><h3 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h3><p>while 条件:</p>
<p>​    条件满足时，执行语句1</p>
<p>​	条件满足时，执行语句2</p>
<p>​	……</p>
<p><strong>注意：</strong></p>
<ul>
<li>while的条件时布尔类型，True表示继续循环，False结束循环</li>
<li><strong>空格缩进同if</strong></li>
</ul>
<h3 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h3><p>九九乘法表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">9</span>:</span><br><span class="line">    j = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= i:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%d * %d = %d\t&quot;</span> % (j,i,i*j),end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure>



<h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><h3 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h3><p>for 临时变量 in 待处理数据集:</p>
<p>​    循环满足条件时执行语句</p>
<p><strong>注意：</strong></p>
<ul>
<li>同while循环不同，python中for循环是无法定义循环条件的，只能从处理的数据集中依次取出内容进行处理，所有理论上for循环无法构建无限循环（被处理的数据集不可能无限大）</li>
<li>语法中，待处理数据集严格来说称之为：序列类型，其内容可以一个个依次取出的一种类型，包括字符串，列表，元组等</li>
<li>注意空格缩进</li>
</ul>
<h3 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h3><p>遍历字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> name:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">h</span></span><br><span class="line"><span class="string">e</span></span><br><span class="line"><span class="string">l</span></span><br><span class="line"><span class="string">l</span></span><br><span class="line"><span class="string">o</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>可以看出，for循环是将字符串的内容<strong>依次取出</strong>，所有for循环也被称为“遍历循环”</p>
<h2 id="循环中断：break和continue"><a href="#循环中断：break和continue" class="headerlink" title="循环中断：break和continue"></a>循环中断：break和continue</h2><ul>
<li>continue：中断本次循环，直接进入下一次循环</li>
<li>break：直接结束所在循环</li>
</ul>
<h2 id="while循环和for循环的一些区别"><a href="#while循环和for循环的一些区别" class="headerlink" title="while循环和for循环的一些区别"></a>while循环和for循环的一些区别</h2><ul>
<li>while循环的循环条件时自定义的，自行控制循环条件</li>
<li>for循环是一种“轮询”机制，是对一批内容进行“逐个处理”</li>
</ul>
<h1 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h1><h2 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">num = random.randint(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line"><span class="comment"># 随机生成一个1到10的整数</span></span><br></pre></td></tr></table></figure>



<h2 id="end-x3D-‘’"><a href="#end-x3D-‘’" class="headerlink" title="end &#x3D; ‘’"></a>end &#x3D; ‘’</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;world&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;world&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">输出结果：</span></span><br><span class="line"><span class="string">hello</span></span><br><span class="line"><span class="string">world</span></span><br><span class="line"><span class="string">helloworld</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>



<h2 id="制表符-t"><a href="#制表符-t" class="headerlink" title="制表符\t"></a>制表符\t</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hihi Shenyang&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello\tworld&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hihi\tShenyang&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">hello world</span></span><br><span class="line"><span class="string">hihi Shenyang</span></span><br><span class="line"><span class="string">hello	world</span></span><br><span class="line"><span class="string">hihi	Shenyang</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>



<h2 id="range语句"><a href="#range语句" class="headerlink" title="range语句"></a>range语句</h2><p>语法1：</p>
<p><strong>range(num)</strong></p>
<p>获取一个从0开始，到num结束的数字序列（不含num本身）</p>
<p>如，range(5)取得的数据是：[0,1,2,3,4]</p>
<p>语法2：</p>
<p><strong>range(num1,num2)</strong></p>
<p>获取一个从num1开始，到num2结束的数字序列（不含num2本身）</p>
<p>如，range(5，10)取得的数据是：[5,6,7,8,9]</p>
<p>语法3：</p>
<p><strong>range(num1,num2,step)</strong></p>
<p>获取一个从num1开始，到num2结束的数字序列（不含num2本身）</p>
<p>数字之间的步长，以step为准（step默认为1）</p>
<p>如，range(5,10,2)取得的数据是：[5,7,9]</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="number">100</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,num):</span><br><span class="line">    <span class="keyword">if</span> x%<span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;从1到<span class="subst">&#123;num&#125;</span>(不含<span class="subst">&#123;num&#125;</span>本身)共有<span class="subst">&#123;count&#125;</span>个偶数&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">运行结果：</span></span><br><span class="line"><span class="string">从1到100(不含100本身)共有49个偶数</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Python基础(五)——函数拓展</title>
    <url>/2023/08/15/Python%E5%9F%BA%E7%A1%80(%E4%BA%94)%E2%80%94%E2%80%94%E5%87%BD%E6%95%B0%E6%8B%93%E5%B1%95/</url>
    <content><![CDATA[<h1 id="函数的多返回值"><a href="#函数的多返回值" class="headerlink" title="函数的多返回值"></a>函数的多返回值</h1><p> 使用多个变量接收多个返回值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>,<span class="string">&quot;hello&quot;</span>,<span class="literal">True</span></span><br><span class="line"></span><br><span class="line">x,y,z = test()    <span class="comment"># x为1，y为&quot;hello&quot;,z为True</span></span><br></pre></td></tr></table></figure>





<h1 id="函数多种传参方式"><a href="#函数多种传参方式" class="headerlink" title="函数多种传参方式"></a>函数多种传参方式</h1><h2 id="函数参数种类"><a href="#函数参数种类" class="headerlink" title="函数参数种类"></a>函数参数种类</h2><p>使用方式上的不同，函数有4钟常见参数使用方式：</p>
<ul>
<li>位置参数</li>
<li>关键字参数</li>
<li>缺省参数</li>
<li>不定长参数</li>
</ul>
<h2 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h2><p>位置参数：调用函数时根据函数定义的参数位置来传递函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">user_info</span>(<span class="params">name,age,gender</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;您的名字是<span class="subst">&#123;name&#125;</span>,年龄是<span class="subst">&#123;age&#125;</span>,性别是<span class="subst">&#123;gender&#125;</span>)</span></span><br><span class="line"><span class="string">          </span></span><br><span class="line"><span class="string">user_info(&#x27;Tom&#x27;,20,&#x27;男&#x27;)</span></span><br></pre></td></tr></table></figure>

<p>注意：传递的参数和定义的参数的顺序及个数必须一致</p>
<h2 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h2><p>关键字参数：函数调用时通过”键&#x3D;值“形式传递参数</p>
<p>作用：可以让函数更加清晰、容易使用，同时也清楚了参数的顺序需求</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">user_info</span>(<span class="params">name,age,gender</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;您的名字是<span class="subst">&#123;name&#125;</span>,年龄是<span class="subst">&#123;age&#125;</span>,性别是<span class="subst">&#123;gender&#125;</span>)</span></span><br><span class="line"><span class="string">          </span></span><br><span class="line"><span class="string"># 关键字传参</span></span><br><span class="line"><span class="string">user_info(name=&#x27;Tom&#x27;, age=20, gender=&#x27;男&#x27;) </span></span><br><span class="line"><span class="string">          </span></span><br><span class="line"><span class="string"># 可以不按照顺序</span></span><br><span class="line"><span class="string">user_info(age=20, name=&#x27;Tom&#x27;, agender=&#x27;男&#x27;) </span></span><br><span class="line"><span class="string">          </span></span><br><span class="line"><span class="string"># 可以和位置参数混用，位置参数必须在前，且匹配参数顺序</span></span><br><span class="line"><span class="string">user_info(&#x27;Tom&#x27;, age=20, gender=&#x27;男&#x27;)           </span></span><br></pre></td></tr></table></figure>

<p>注意：函数调用时，如果有位置参数时，位置参数必须在关键字参数前面，但关键字参数之间不存在先后顺序</p>
<h2 id="缺省参数"><a href="#缺省参数" class="headerlink" title="缺省参数"></a>缺省参数</h2><p>缺省参数：缺省参数也叫默认参数，用于定义函数，为参数提供默认值，调用函数时可不传该默认参数的值（注意：所有位置参数必须出现在默认参数前，包括函数定义和调用）</p>
<p>作用：当调用函数时没有传递函数，就会使用默认使用缺省参数对应的值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">user_info</span>(<span class="params">name,age,gender=<span class="string">&#x27;男&#x27;</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;您的名字是<span class="subst">&#123;name&#125;</span>,年龄是<span class="subst">&#123;age&#125;</span>,性别是<span class="subst">&#123;gender&#125;</span>)</span></span><br><span class="line"><span class="string">          </span></span><br><span class="line"><span class="string">user_info(&#x27;Tom&#x27;, 20)</span></span><br><span class="line"><span class="string">user_info(&#x27;Rose&#x27;, 18, &#x27;女&#x27;)          </span></span><br></pre></td></tr></table></figure>

<p>注意：函数调用时，如果为缺省参数传值则修改默认参数值，否则使用这个默认值</p>
<h2 id="不定长参数"><a href="#不定长参数" class="headerlink" title="不定长参数"></a>不定长参数</h2><p>不定长参数：不定长参数也叫可变参数，用于不确定调用的时候会传递多少个参数（不传参也可以）的场景</p>
<p>作用：当调用函数时不确定参数个数时，可以使用不定长参数</p>
<p>不定长参数的类型：</p>
<ul>
<li><p>位置传递</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">user_info</span>(<span class="params">*args</span>):</span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># (&#x27;Tom&#x27;)</span></span><br><span class="line">user_info(<span class="string">&#x27;Tom&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># (&#x27;Tom&#x27;,18)</span></span><br><span class="line">user_info(<span class="string">&#x27;Tom&#x27;</span>,<span class="number">18</span>)</span><br></pre></td></tr></table></figure>

<p>注意：传进的所有参数都会被args变量收集，它会根据传进参数的位置合并为一个元组(tuple)，args是元组类型</p>
</li>
<li><p>关键字传递</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">user_info</span>(<span class="params">**kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(kwargs)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># &#123;&#x27;name&#x27;:&#x27;Tom&#x27;, &#x27;age&#x27;:18, &#x27;id&#x27;:110&#125;</span></span><br><span class="line">user_info(name=<span class="string">&#x27;Tom&#x27;</span>, age=<span class="number">18</span>, <span class="built_in">id</span>=<span class="number">110</span>)</span><br></pre></td></tr></table></figure>

<p>注意：参数是”键&#x3D;值“形式的情况下，所有的”键&#x3D;值“都会被kwargs接受，同时会根据”键&#x3D;值“组成字典</p>
</li>
</ul>
<h1 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h1><h2 id="函数作为参数传递"><a href="#函数作为参数传递" class="headerlink" title="函数作为参数传递"></a>函数作为参数传递</h2><ul>
<li>函数本身可以作为参数，传入另一个函数中使用</li>
<li>这是一种计算逻辑的传递，而非数据的传递</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">text</span>(<span class="params">computer</span>):</span><br><span class="line">    result = computer(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;compute函数的类型是；<span class="subst">&#123;<span class="built_in">type</span>(computer)&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;计算结果：<span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compter</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="keyword">return</span> x+y</span><br><span class="line"></span><br><span class="line">text(computer)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">运行结果</span></span><br><span class="line"><span class="string">compute函数的类型是；&lt;class &#x27;function&#x27;&gt;</span></span><br><span class="line"><span class="string">计算结果：3</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>



<h2 id="lambda匿名函数"><a href="#lambda匿名函数" class="headerlink" title="lambda匿名函数"></a>lambda匿名函数</h2><p>函数的定义中</p>
<ul>
<li>def关键字，可以定义带有名称的函数，可以基于名称重复使用</li>
<li>lambda关键字，可以定义匿名函数（无名称），只可以临时使用一次</li>
</ul>
<p>匿名函数定义语法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lambda</span> 传入参数:函数体(一行代码)</span><br></pre></td></tr></table></figure>

<ul>
<li>lambda是关键字，表示定义匿名函数</li>
<li>传入参数表示匿名函数的形式参数，如：x,y表示接受2个形式参数</li>
<li>函数体，就是函数的执行逻辑，要注意：只能写一行，无法写多行代码</li>
</ul>
<p>例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">text</span>(<span class="params">computer</span>):</span><br><span class="line">    result = computer(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;compute函数的类型是；<span class="subst">&#123;<span class="built_in">type</span>(computer)&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;计算结果：<span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compter</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="keyword">return</span> x+y</span><br><span class="line"></span><br><span class="line">text(computer)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以使用lambda表达式将上述代码简化，如下</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">text</span>(<span class="params">computer</span>):</span><br><span class="line">    result = computer(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;compute函数的类型是；<span class="subst">&#123;<span class="built_in">type</span>(computer)&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;计算结果：<span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">text(<span class="keyword">lambda</span> x,y: x+y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 两段代码作用和运行结果完全一致</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Python基础(八)——面向对象</title>
    <url>/2023/08/23/Python%E5%9F%BA%E7%A1%80(%E5%85%AB)%E2%80%94%E2%80%94%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h1 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h1><ol>
<li><p>类的组成：</p>
<ul>
<li>类的属性，称之为：成员变量</li>
<li>类的行为，称之为：成员方法、</li>
</ul>
<p>注意：函数是写在类外的，定义在类内部，我们都称之为方法</p>
</li>
<li><p>类和成员方法的定义语法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">类名称</span>:</span><br><span class="line">    成员变量</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">成员方法</span>(<span class="params">self,参数列表</span>):</span><br><span class="line">        成员方法体</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">对象 = 类名称()</span><br></pre></td></tr></table></figure>
</li>
<li><p>self的作用</p>
<ul>
<li>表示类对象本身的意思</li>
<li>只有通过self，成员方法才能访问类的成员变量</li>
<li>self出现在形参列表中，但是不占用参数位置，无需理会</li>
</ul>
</li>
</ol>
<h1 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h1><ol>
<li><p>类和对象的关系：</p>
<p>类就是程序中的“设计图纸”，对象是基于图纸生产的具体实体</p>
</li>
<li><p>什么是面向对象编程：</p>
<p>面向对象编程就是使用对象编程。</p>
<p>即设计类，基于类创建对象，并使用对象来完成具体的工作</p>
</li>
</ol>
<h1 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h1><ol>
<li>构造方法的名称：<code>__init__</code>，init前后是两个下划线</li>
<li>构造方法的作用：<ul>
<li>构建对象的时候会自动运行</li>
<li>构建类对象的传参会传递给构造方法，借此特性可以给成员变量赋值</li>
</ul>
</li>
<li>注意事项：<ul>
<li>构造方法不要忘记self关键字</li>
<li>在方法内使用成员需要使用self</li>
</ul>
</li>
</ol>
<h1 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h1><table>
<thead>
<tr>
<th>方法</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td><code>__init__</code></td>
<td>构造方法，可用于创建类对象的时候设置初始化行为</td>
</tr>
<tr>
<td><code>__str__</code></td>
<td>用于实现类对象转字符串的行为</td>
</tr>
<tr>
<td><code>__lt__</code></td>
<td>用于2个类对象进行小于或大于比较</td>
</tr>
<tr>
<td><code>__le__</code></td>
<td>用于2个类对象进行小于等于或大于等于比较</td>
</tr>
<tr>
<td><code>__eq__</code></td>
<td>用于2个类对象进行相等比较</td>
</tr>
</tbody></table>
<h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><ol>
<li><p>封装的概念：将现实世界事物在类中描述为属性和方法，即为封装</p>
</li>
<li><p>什么是私有成员？为什么需要私有成员？</p>
<p>现实事物有部分属性和行为是不公开对使用者开放的。同样在类中描述属性和方法的时候也需要达到这个要求，就需要私有成员了</p>
</li>
<li><p>如何定义私有成员：</p>
<p>成员变量和成员方法的命名均以<code>__</code>作为开头（两个下划线）</p>
</li>
<li><p>私有成员的访问限制：</p>
<ul>
<li>类对象无法访问私有成员</li>
<li>类中其他成员可以访问私有成员</li>
</ul>
</li>
</ol>
<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><ol>
<li><p>继承：继承就是一个类，继承了另一个类的成员变量和成员方法</p>
<p>语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">类</span>(父类<span class="number">1</span>,父类<span class="number">2</span>,……)</span><br><span class="line">	类体内容</span><br></pre></td></tr></table></figure>

<p>子类构建的类对象，可以</p>
<ul>
<li>有自己的成员变量和成员方法</li>
<li>使用父类的成员变量和成员方法</li>
</ul>
</li>
<li><p>单继承和多继承</p>
<ul>
<li>单继承：一个类继承另一个类</li>
<li>多继承：一个类继承多个类，按照顺序从左向右依次继承</li>
<li>多继承中，如果父类有同名方法或属性，先继承的优先级高于后继承</li>
</ul>
</li>
<li><p><code>pass</code>关键字的作用：</p>
<p>pass是占位语言，用来保证函数（方法）或类定义的完整性，表示无内容，空的意思</p>
</li>
<li><p>复写：对父类的成员属性或成员方法进行重新定义</p>
<p>语法：在子类中重新实现同名成员方法或成员属性即可</p>
</li>
<li><p>在子类中调用父类成员：</p>
<ul>
<li><p>方法一：</p>
<p>调用父类成员：</p>
<p>调用父类成员变量：<code>父类名.成员变量</code></p>
<p>调用父类成员方法：<code>父类名.成员方法(self)</code></p>
</li>
<li><p>方法二</p>
<p>使用super()调用父类成员</p>
<p>调用成员变量：<code>super().成员变量</code></p>
<p>调用成员方法：<code>super().成员方法()</code></p>
</li>
<li><p>注意：只可以在子类内部调用父类同名成员，子类的实体类调用默认是调用子类复写的</p>
</li>
</ul>
</li>
</ol>
<h1 id="类型注解"><a href="#类型注解" class="headerlink" title="类型注解"></a>类型注解</h1><h2 id="变量的类型注解"><a href="#变量的类型注解" class="headerlink" title="变量的类型注解"></a>变量的类型注解</h2><ol>
<li><p>什么是类型注解，有什么作用？</p>
<p>在代码中涉及数据交互之时，对数据类型进行显式的说明，可以帮助：</p>
<ul>
<li>PyCharm等开发工具对代码做类型推断协助做代码提示</li>
<li>开发者自身做类型类型的备注</li>
</ul>
</li>
<li><p>类型注解支持：</p>
<ul>
<li>变量的类型注解</li>
<li>函数（方法）的形参和返回值的类型注解</li>
</ul>
</li>
<li><p>变量的类型注解语法</p>
<ul>
<li>语法1：<code>变量:类型</code></li>
<li>语法2：在注释中，<code># type: 类型</code></li>
</ul>
</li>
<li><p>注意事项</p>
<p>类型注解只是提示性的，并非决定性的。数据类型和注解类型无法对应也不会导致错误</p>
</li>
</ol>
<h2 id="函数（方法）的类型注解"><a href="#函数（方法）的类型注解" class="headerlink" title="函数（方法）的类型注解"></a>函数（方法）的类型注解</h2><ol>
<li><p>函数（方法）可以为哪里添加注解？</p>
<ul>
<li>形参的类型注解</li>
<li>返回值的类型注解</li>
</ul>
</li>
<li><p>函数（方法）的类型注解语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数方法名</span>(<span class="params">形参: 类型,……,形参: 类型</span>) -&gt; 返回值类型:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>注意，返回值类型注解的符号使用： <code>-&gt;</code></p>
</li>
</ol>
<h2 id="Union类型"><a href="#Union类型" class="headerlink" title="Union类型"></a>Union类型</h2><ol>
<li><p>什么是Union类型？</p>
<p>使用Union可以定义联合类型注解</p>
</li>
<li><p>Union的使用方法</p>
<ul>
<li>导包：<code>from typing import Union</code></li>
<li>使用：<code>Union[类型,……,类型]</code></li>
</ul>
</li>
</ol>
<h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><ol>
<li><p>什么是多态？</p>
<p>多态指的是，同一行为，使用不同对象获得不同的状态</p>
<p>如，定义函数（方法），通过类型注解声明需要的父类对象，实际传入子类对象进行工作，从而获得不同的工作状态</p>
</li>
<li><p>什么是抽象类（接口）？</p>
<p>包含抽象方法的类，称之为抽象类。抽象方法是指：没有具体实现的方法（pass）称之为抽象方法</p>
</li>
<li><p>抽象类的作用</p>
<p>多用于顶层设计（设计标准），以便子类做具体实现。也是对子类的一种软性约束，要求子类必须复写（实现）父类的一些方法并配合多态使用，获得不同的工作状态</p>
</li>
</ol>
<p>​     </p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Python基础(四)——数据容器</title>
    <url>/2023/08/13/Python%E5%9F%BA%E7%A1%80(%E5%9B%9B)%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%AE%B9%E5%99%A8/</url>
    <content><![CDATA[<h1 id="数据容器入门"><a href="#数据容器入门" class="headerlink" title="数据容器入门"></a>数据容器入门</h1><p>Python中的数据容器：</p>
<p>一个可以容纳多份数据的数据类型，容纳的每一份元素称之为1个元素，每个元素可以是任意类型的数据，如字符串、数字、布尔等。</p>
<p>数据容器根据特点的不同，如：</p>
<ul>
<li>是否支持重复元素</li>
<li>是否可以修改</li>
<li>是否有序，等</li>
</ul>
<p>分为5类，分别是：列表（list）、元组（tuple）、字符串（str）、集合（set）、字典（dict）</p>
<h1 id="数据容器：list（列表）"><a href="#数据容器：list（列表）" class="headerlink" title="数据容器：list（列表）"></a>数据容器：list（列表）</h1><h2 id="列表的定义"><a href="#列表的定义" class="headerlink" title="列表的定义"></a>列表的定义</h2><p>基本语法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字面量</span></span><br><span class="line">[元素<span class="number">1</span>,元素<span class="number">2</span>,元素<span class="number">3</span>,……]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义变量</span></span><br><span class="line">变量名称 = [元素<span class="number">1</span>,元素<span class="number">2</span>,元素<span class="number">3</span>,……]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义空列表</span></span><br><span class="line">变量名称 = []</span><br><span class="line">变量名称 = <span class="built_in">list</span>()</span><br></pre></td></tr></table></figure>



<p>注意：</p>
<ul>
<li><p>列表的每一个元素，称之为元素</p>
</li>
<li><p>以 [] 作为标识</p>
</li>
<li><p>列表内每个元素之间用逗号隔开</p>
</li>
<li><p>列表可以一次存储多个数据，且可以为不同的数据类型，支持嵌套</p>
</li>
</ul>
<h2 id="列表的下标索引"><a href="#列表的下标索引" class="headerlink" title="列表的下标索引"></a>列表的下标索引</h2><p>列表的每个元素都有其位置下标索引，从前向后的方向，从0开始，依次递增，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：列表[下标索引]</span></span><br><span class="line"></span><br><span class="line">name_list = [<span class="string">&#x27;Sam&#x27;</span>,<span class="string">&#x27;Jack&#x27;</span>,<span class="string">&#x27;Mark&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(name_list[<span class="number">0</span>])		<span class="comment">#结果：Sam</span></span><br><span class="line"><span class="built_in">print</span>(name_list[<span class="number">1</span>])		<span class="comment">#结果：Jack</span></span><br><span class="line"><span class="built_in">print</span>(name_list[<span class="number">2</span>])		<span class="comment">#结果：Mark</span></span><br></pre></td></tr></table></figure>



<p>反向索引，从后往前的方向，从-1开始递减，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：列表[下标索引]</span></span><br><span class="line"></span><br><span class="line">name_list = [<span class="string">&#x27;Sam&#x27;</span>,<span class="string">&#x27;Jack&#x27;</span>,<span class="string">&#x27;Mark&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(name_list[-<span class="number">1</span>])		<span class="comment">#结果：Mark</span></span><br><span class="line"><span class="built_in">print</span>(name_list[-<span class="number">2</span>])		<span class="comment">#结果：Jack</span></span><br><span class="line"><span class="built_in">print</span>(name_list[-<span class="number">3</span>])		<span class="comment">#结果：Sam</span></span><br></pre></td></tr></table></figure>



<p>嵌套列表的下标索引，同上，写两层即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法 列表[下标][下标]</span></span><br></pre></td></tr></table></figure>



<h2 id="列表的常用操作"><a href="#列表的常用操作" class="headerlink" title="列表的常用操作"></a>列表的常用操作</h2><p>方法：在Python中，如果将函数定义为class（类）的成员，那么函数会称之为方法<strong>（写在类里的函数成为方法）</strong>，使用“.”访问</p>
<h3 id="列表的查询功能——index"><a href="#列表的查询功能——index" class="headerlink" title="列表的查询功能——index()"></a>列表的查询功能——index()</h3><ul>
<li><p>查询某元素下标</p>
<p>功能：查找指定元素在列表的下标，如果找不到，报错ValueError</p>
<p>语法：<strong>列表.index(元素)</strong></p>
</li>
</ul>
<h3 id="修改元素"><a href="#修改元素" class="headerlink" title="修改元素"></a>修改元素</h3><ul>
<li><p>修改特定位置（索引）的元素值</p>
<p>语法：<strong>列表[下标] &#x3D; 值</strong></p>
<p>通过如上语法即可直接对指定位置的值进行重新赋值</p>
</li>
<li><p>插入元素</p>
<p>语法：<strong>列表.insert(下标,元素)</strong></p>
<p>在指定的下标位置，插入指定元素，该位置原来的元素和后续元素，依次向后移</p>
</li>
<li><p>追加元素1</p>
<p>语法：<strong>列表.append(元素)</strong></p>
<p>将元素追加到列表的尾部</p>
</li>
<li><p>追加元素2</p>
<p>语法：<strong>列表.extend(其他数据容器)</strong></p>
<p>将其他数据容器的内容取出，依次追加到列表尾部</p>
</li>
<li><p>删除元素</p>
<p>语法1：<strong>del 列表[下标]</strong></p>
<p>语法2：<strong>列表.pop(下标)</strong></p>
<p>语法3：<strong>列表.remove(元素)</strong></p>
<p>方法pop()不仅可以删除元素，还会返回被删除的元素，remove()是删除某元素在列表的第一个匹配项</p>
</li>
<li><p>清空列表</p>
<p>语法：<strong>列表.clear()</strong></p>
<p>清空列表内容</p>
</li>
<li><p>统计某元素在列表内的数量</p>
<p>语法：<strong>列表.count(元素)</strong></p>
</li>
<li><p>统计列表中有多少元素</p>
<p>语法：<strong>len(列表)</strong></p>
<p>可以得到一个int型的数字，表示列表内的元素数量</p>
</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><table>
<thead>
<tr>
<th align="center">功能</th>
<th align="center">语法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">查询某元素下标</td>
<td align="center">列表.index(元素)</td>
<td align="center">查找指定元素在列表的下标，如果找不到，报错ValueError</td>
</tr>
<tr>
<td align="center">修改元素值</td>
<td align="center">列表[下标] &#x3D; 值</td>
<td align="center">直接对指定位置的值进行重新赋值</td>
</tr>
<tr>
<td align="center">插入元素</td>
<td align="center">列表.insert(下标,元素)</td>
<td align="center">在指定的下标位置，插入指定元素，该位置原来的元素和后续元素，依次向后移</td>
</tr>
<tr>
<td align="center">追加元素</td>
<td align="center">列表.append(元素)</td>
<td align="center">将元素追加到列表的尾部</td>
</tr>
<tr>
<td align="center">追加元素</td>
<td align="center">列表.extend(其他数据容器)</td>
<td align="center">将其他数据容器的内容取出，依次追加到列表尾部</td>
</tr>
<tr>
<td align="center">删除元素</td>
<td align="center">del 列表[下标]</td>
<td align="center">删除下标位置上的元素</td>
</tr>
<tr>
<td align="center">删除元素</td>
<td align="center">列表.pop(下标)</td>
<td align="center">方法pop()不仅可以删除元素，还会返回被删除的元素</td>
</tr>
<tr>
<td align="center">删除元素</td>
<td align="center">列表.remove(元素)</td>
<td align="center">remove()是删除某元素在列表的第一个匹配项</td>
</tr>
<tr>
<td align="center">清空列表</td>
<td align="center">列表.clear()</td>
<td align="center">清空列表内容</td>
</tr>
<tr>
<td align="center">统计某元素数量</td>
<td align="center">列表.count(元素)</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">统计列表元素</td>
<td align="center">len(列表)</td>
<td align="center"></td>
</tr>
</tbody></table>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法：列表[下标索引]</span></span><br><span class="line"></span><br><span class="line">name_list = [<span class="string">&#x27;Sam&#x27;</span>,<span class="string">&#x27;Jack&#x27;</span>,<span class="string">&#x27;Mark&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(name_list[<span class="number">0</span>])		<span class="comment">#结果：Sam</span></span><br><span class="line"><span class="built_in">print</span>(name_list[<span class="number">1</span>])		<span class="comment">#结果：Jack</span></span><br><span class="line"><span class="built_in">print</span>(name_list[<span class="number">2</span>])		<span class="comment">#结果：Mark</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 语法：列表[下标索引]</span></span><br><span class="line"></span><br><span class="line">name_list = [<span class="string">&#x27;Sam&#x27;</span>,<span class="string">&#x27;Jack&#x27;</span>,<span class="string">&#x27;Mark&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(name_list[-<span class="number">1</span>])		<span class="comment">#结果：Mark</span></span><br><span class="line"><span class="built_in">print</span>(name_list[-<span class="number">2</span>])		<span class="comment">#结果：Jack</span></span><br><span class="line"><span class="built_in">print</span>(name_list[-<span class="number">3</span>])		<span class="comment">#结果：Sam</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.索引元素 index()</span></span><br><span class="line">index = name_list.index(<span class="string">&quot;Jack&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;“Jack”在列表中的位置是<span class="subst">&#123;index&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.修改元素</span></span><br><span class="line">name_list[<span class="number">2</span>] = <span class="string">&quot;Tom&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;列表修改元素后，结果是：\t\t<span class="subst">&#123;name_list&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.插入元素 insert()</span></span><br><span class="line">name_list.insert(<span class="number">2</span>,<span class="string">&quot;Mark&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;列表插入元素后，结果是：\t\t<span class="subst">&#123;name_list&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.追加元素 append()</span></span><br><span class="line">name_list.append(<span class="string">&quot;Peter&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;列表追加元素后，结果是：\t\t<span class="subst">&#123;name_list&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.追加元素 extend()</span></span><br><span class="line">name_list2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">name_list.extend(name_list2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;列表追加一个新列表后，结果是：\t<span class="subst">&#123;name_list&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.删除元素</span></span><br><span class="line"><span class="keyword">del</span> name_list[<span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;列表删除元素后，结果是：\t\t<span class="subst">&#123;name_list&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">getWord = name_list.pop(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;列表取出元素后，结果是：\t\t<span class="subst">&#123;name_list&#125;</span>,取出的元素是：<span class="subst">&#123;getWord&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">name_list.remove(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;列表删除元素后，结果是：\t\t<span class="subst">&#123;name_list&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.清空列表</span></span><br><span class="line">name_list.clear()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;清空列表后，结果是：\t\t\t<span class="subst">&#123;name_list&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8.统计列表内某元素的数量</span></span><br><span class="line">name_list = [<span class="string">&#x27;Sam&#x27;</span>,<span class="string">&#x27;Jack&#x27;</span>,<span class="string">&#x27;Mark&#x27;</span>,<span class="string">&#x27;Sam&#x27;</span>,<span class="string">&#x27;Sam&#x27;</span>,<span class="string">&#x27;Sam&#x27;</span>]</span><br><span class="line">count = name_list.count(<span class="string">&quot;Sam&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;列表中Sam的数量是：\t\t\t<span class="subst">&#123;count&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 9.统计列表中有多少元素</span></span><br><span class="line">count = <span class="built_in">len</span>(name_list)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;列表中元素的数量是：\t\t\t<span class="subst">&#123;count&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">运行结果：</span></span><br><span class="line"><span class="string">Sam</span></span><br><span class="line"><span class="string">Jack</span></span><br><span class="line"><span class="string">Mark</span></span><br><span class="line"><span class="string">Mark</span></span><br><span class="line"><span class="string">Jack</span></span><br><span class="line"><span class="string">Sam</span></span><br><span class="line"><span class="string">“Jack”在列表中的位置是1</span></span><br><span class="line"><span class="string">列表修改元素后，结果是：		[&#x27;Sam&#x27;, &#x27;Jack&#x27;, &#x27;Tom&#x27;]</span></span><br><span class="line"><span class="string">列表插入元素后，结果是：		[&#x27;Sam&#x27;, &#x27;Jack&#x27;, &#x27;Mark&#x27;, &#x27;Tom&#x27;]</span></span><br><span class="line"><span class="string">列表追加元素后，结果是：		[&#x27;Sam&#x27;, &#x27;Jack&#x27;, &#x27;Mark&#x27;, &#x27;Tom&#x27;, &#x27;Peter&#x27;]</span></span><br><span class="line"><span class="string">列表追加一个新列表后，结果是：	  [&#x27;Sam&#x27;, &#x27;Jack&#x27;, &#x27;Mark&#x27;, &#x27;Tom&#x27;, &#x27;Peter&#x27;, 1, 2, 3]</span></span><br><span class="line"><span class="string">列表删除元素后，结果是：		[&#x27;Sam&#x27;, &#x27;Jack&#x27;, &#x27;Mark&#x27;, &#x27;Tom&#x27;, &#x27;Peter&#x27;, 2, 3]</span></span><br><span class="line"><span class="string">列表取出元素后，结果是：		[&#x27;Sam&#x27;, &#x27;Jack&#x27;, &#x27;Mark&#x27;, &#x27;Tom&#x27;, &#x27;Peter&#x27;, 3],取出的元素是：2</span></span><br><span class="line"><span class="string">列表删除元素后，结果是：		[&#x27;Sam&#x27;, &#x27;Jack&#x27;, &#x27;Mark&#x27;, &#x27;Tom&#x27;, &#x27;Peter&#x27;]</span></span><br><span class="line"><span class="string">清空列表后，结果是：			 []</span></span><br><span class="line"><span class="string">列表中Sam的数量是：			  4</span></span><br><span class="line"><span class="string">列表中元素的数量是：			 6</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>



<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul>
<li>可以容纳多个元素</li>
<li>可以容纳不同类型的元素</li>
<li>数据是有序储存（有下标序号）</li>
<li>允许重复数据存在</li>
<li>可以修改（增加或删除元素等）</li>
</ul>
<h2 id="列表的遍历"><a href="#列表的遍历" class="headerlink" title="列表的遍历"></a>列表的遍历</h2><ol>
<li>遍历：将容器的内容依次取出，并处理，称之为遍历</li>
<li>for和while对比<ul>
<li>for循环更简洁，while更灵活</li>
<li>for用于从容器内依次取出元素并处理，while可以用以任何需要循环的场景</li>
</ul>
</li>
</ol>
<h1 id="数据容器：tuple（元组）"><a href="#数据容器：tuple（元组）" class="headerlink" title="数据容器：tuple（元组）"></a>数据容器：tuple（元组）</h1><h2 id="元组的定义"><a href="#元组的定义" class="headerlink" title="元组的定义"></a>元组的定义</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字面量</span></span><br><span class="line">(元素<span class="number">1</span>,元素<span class="number">2</span>,元素<span class="number">3</span>,……)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义变量</span></span><br><span class="line">变量名称 = (元素<span class="number">1</span>,元素<span class="number">2</span>,元素<span class="number">3</span>,……)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义空列表</span></span><br><span class="line">变量名称 = ()</span><br><span class="line">变量名称 = <span class="built_in">tuple</span>()</span><br></pre></td></tr></table></figure>



<p>注意：</p>
<ul>
<li>元组只有一个数据时，这个数后面要添加<strong>逗号</strong></li>
<li>元组也支持嵌套</li>
<li>元组的下标索引与列表相同</li>
<li>元组的内容时不可修改的，否则会报错，但如果在元组中嵌套列表，嵌套的列表是可以修改的</li>
<li>多数特性和list一样，不同点在于不可修改</li>
</ul>
<h2 id="元组的相关操作"><a href="#元组的相关操作" class="headerlink" title="元组的相关操作"></a>元组的相关操作</h2><table>
<thead>
<tr>
<th align="center">语法</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">index()</td>
<td align="center">查找某个数据，如果数据存在返回对于的下标，否则报错</td>
</tr>
<tr>
<td align="center">count()</td>
<td align="center">统计某个数据在当前元组出现的次数</td>
</tr>
<tr>
<td align="center">len(元组)</td>
<td align="center">统计元组内的元素个数</td>
</tr>
</tbody></table>
<h2 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义元组</span></span><br><span class="line">tup = (<span class="string">&quot;Sam&quot;</span>,<span class="string">&quot;Jack&quot;</span>,<span class="string">&quot;Mark&quot;</span>,<span class="string">&quot;Sam&quot;</span>,[<span class="string">&quot;唱歌&quot;</span>,<span class="string">&quot;篮球&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计元组长度</span></span><br><span class="line">num = <span class="built_in">len</span>(tup)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;元组的长度是：\t<span class="subst">&#123;num&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计元组中，&quot;Sam&quot;出现的次数</span></span><br><span class="line">num = tup.count(<span class="string">&quot;Sam&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;”Sam“出现的次数：\t<span class="subst">&#123;num&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 索引&quot;Mark&quot;在元组中的位置</span></span><br><span class="line">num = tup.index(<span class="string">&quot;Mark&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;”Mark“所在的位置：<span class="subst">&#123;num&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;原元组的元素：\t<span class="subst">&#123;tup&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除元组中嵌套的列表元素</span></span><br><span class="line">tup[<span class="number">4</span>].pop(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;删除元素后的元组：\t<span class="subst">&#123;tup&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在元组嵌套的列表中添加元素</span></span><br><span class="line">tup[<span class="number">4</span>].append(<span class="string">&quot;coding&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;添加元素后的元组：\t<span class="subst">&#123;tup&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">运行结果：</span></span><br><span class="line"><span class="string">元组的长度是：		 5</span></span><br><span class="line"><span class="string">”Sam“出现的次数：	  2</span></span><br><span class="line"><span class="string">”Mark“所在的位置：  2</span></span><br><span class="line"><span class="string">原元组的元素：	     (&#x27;Sam&#x27;, &#x27;Jack&#x27;, &#x27;Mark&#x27;, &#x27;Sam&#x27;, [&#x27;唱歌&#x27;, &#x27;篮球&#x27;])</span></span><br><span class="line"><span class="string">删除元素后的元组：	(&#x27;Sam&#x27;, &#x27;Jack&#x27;, &#x27;Mark&#x27;, &#x27;Sam&#x27;, [&#x27;篮球&#x27;])</span></span><br><span class="line"><span class="string">添加元素后的元组：	(&#x27;Sam&#x27;, &#x27;Jack&#x27;, &#x27;Mark&#x27;, &#x27;Sam&#x27;, [&#x27;篮球&#x27;, &#x27;coding&#x27;])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>



<h1 id="数据容器：str（字符串）"><a href="#数据容器：str（字符串）" class="headerlink" title="数据容器：str（字符串）"></a>数据容器：str（字符串）</h1><h2 id="字符串介绍"><a href="#字符串介绍" class="headerlink" title="字符串介绍"></a>字符串介绍</h2><ul>
<li>字符串是字符的容器</li>
<li>一个字符串可以存放任意数量的字符</li>
<li>支持下标索引</li>
<li>允许重复字符串存在</li>
<li>不可以修改</li>
<li>字符串定义和格式化在<a href="./Python%E5%9F%BA%E7%A1%80(%E4%B8%80)%E2%80%94%E2%80%94%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">Python基础（一）</a>中有介绍</li>
</ul>
<h2 id="字符串的常用操作"><a href="#字符串的常用操作" class="headerlink" title="字符串的常用操作"></a>字符串的常用操作</h2><table>
<thead>
<tr>
<th align="center">语法</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">字符串[下标]</td>
<td align="center">同列表、元组</td>
</tr>
<tr>
<td align="center">字符串.index()</td>
<td align="center">同列表、元组</td>
</tr>
<tr>
<td align="center">字符串.replace(字符串1,字符串2)</td>
<td align="center">将字符串1内容替换为字符串2的内容</td>
</tr>
<tr>
<td align="center">字符串.split(分隔符字符串)</td>
<td align="center">按照指定的分隔符字符串，将字符串划分为多个字符串，并存入列表对象中</td>
</tr>
<tr>
<td align="center">字符串.strip()</td>
<td align="center">去掉前后空格</td>
</tr>
<tr>
<td align="center">字符串.strip(字符串)</td>
<td align="center">去掉前后指定的字符串</td>
</tr>
<tr>
<td align="center">字符串.count(字符串)</td>
<td align="center">统计某个数据在当前元组出现的次数</td>
</tr>
<tr>
<td align="center">len(字符串)</td>
<td align="center">统计元组内的元素个数</td>
</tr>
</tbody></table>
<h1 id="数据容器（序列）的切片"><a href="#数据容器（序列）的切片" class="headerlink" title="数据容器（序列）的切片"></a>数据容器（序列）的切片</h1><p><strong>序列：</strong>内容连续、有序，可使用下标索引的一类数据容器，列表、元组、字符串均可以视为序列</p>
<p><strong>切片：</strong>从一个序列中，取出一个子序列</p>
<p>语法：序列[起始下标:结束下标:步长]</p>
<ul>
<li>起始下标：从何处开始，可以留空，留空视作从头开始</li>
<li>结束下标：何处结束（不含），可以留空，留空视作截到结尾</li>
<li>步长：依次取元素的间隔<ul>
<li>不写默认是1</li>
<li>步长1表示，一个个取元素，步长N表示每次跳过N-1个元素取</li>
<li>步长为负数表示反向取（起始下标和结束下标也要反向标记）</li>
</ul>
</li>
</ul>
<p>注意：切片操作不会影响序列本身，而是得到一个新的序列</p>
<h1 id="数据容器：set（集合）"><a href="#数据容器：set（集合）" class="headerlink" title="数据容器：set（集合）"></a>数据容器：set（集合）</h1><h2 id="集合的定义"><a href="#集合的定义" class="headerlink" title="集合的定义"></a>集合的定义</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义集合字面量</span></span><br><span class="line">&#123;元素,元素,……,元素&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义集合变量</span></span><br><span class="line">变量名称 = &#123;元素,元素,……,元素&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义空集合</span></span><br><span class="line">变量名称 = <span class="built_in">set</span>()</span><br></pre></td></tr></table></figure>



<h2 id="集合的常用操作"><a href="#集合的常用操作" class="headerlink" title="集合的常用操作"></a>集合的常用操作</h2><table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">集合.add(元素)</td>
<td align="center">集合内添加一个元素</td>
</tr>
<tr>
<td align="center">集合.remove(元素)</td>
<td align="center">移除集合内指定的元素</td>
</tr>
<tr>
<td align="center">集合.pop()</td>
<td align="center">从集合中随机取出一个元素</td>
</tr>
<tr>
<td align="center">集合.clear()</td>
<td align="center">将集合清空</td>
</tr>
<tr>
<td align="center">集合1.difference(集合2)</td>
<td align="center">得到一个新集合，内含2个集合的差集，原有的2个集合内容不变</td>
</tr>
<tr>
<td align="center">集合1.difference_uodate(集合2)</td>
<td align="center">在集合1中，删除集合2中存在的元素集合1被修改，集合2不变</td>
</tr>
<tr>
<td align="center">集合1.union(集合2)</td>
<td align="center">得到1个新集合，内含2个集合的全部元素，原有的2个集合内容不变</td>
</tr>
<tr>
<td align="center">len(集合)</td>
<td align="center">得到一个整数。记录了集合的元素个数</td>
</tr>
</tbody></table>
<h2 id="集合的特点"><a href="#集合的特点" class="headerlink" title="集合的特点"></a>集合的特点</h2><ul>
<li>可以容纳多个元素</li>
<li>可以容纳不同类型的数据（混装）</li>
<li>数据时无序存储的（不支持下标索引）</li>
<li>不允许重复数据存在</li>
<li>可以修改</li>
<li>支持for循环遍历，不可以使用while循环遍历（无法下标索引）</li>
</ul>
<h1 id="数据容器：dict（字典）"><a href="#数据容器：dict（字典）" class="headerlink" title="数据容器：dict（字典）"></a>数据容器：dict（字典）</h1><h2 id="字典的定义"><a href="#字典的定义" class="headerlink" title="字典的定义"></a>字典的定义</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义字典字面量</span></span><br><span class="line">&#123;key:value , key:value , key:value ,……, key:value&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义字典变量</span></span><br><span class="line">my_dict = &#123;key:value , key:value , key:value ,……, key:value&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义空字典</span></span><br><span class="line">my_dict = &#123;&#125;</span><br><span class="line">my_dict = <span class="built_in">dict</span>()</span><br></pre></td></tr></table></figure>



<h2 id="字典的常用操作"><a href="#字典的常用操作" class="headerlink" title="字典的常用操作"></a>字典的常用操作</h2><table>
<thead>
<tr>
<th align="center">语法</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">字典[Key]</td>
<td align="center">获取指定Key对应的Value值</td>
</tr>
<tr>
<td align="center">字典[Key] &#x3D; Value</td>
<td align="center">添加或更新键值对</td>
</tr>
<tr>
<td align="center">字典.pop(Key)</td>
<td align="center">取出Key对应的Value并在字典内删除此Key的键值对</td>
</tr>
<tr>
<td align="center">字典.clear()</td>
<td align="center">请空字典</td>
</tr>
<tr>
<td align="center">字典.keys()</td>
<td align="center">获取字典的全部Key，可用for循环遍历字典</td>
</tr>
<tr>
<td align="center">len(字典)</td>
<td align="center">计算字典内的元素个数</td>
</tr>
</tbody></table>
<h2 id="字典的特点"><a href="#字典的特点" class="headerlink" title="字典的特点"></a>字典的特点</h2><ul>
<li>字典可以提供基于Key检索Value的场景实现，Key不可以重复（重复会覆盖）</li>
<li>键值对的Key和Value可以是任意类型数据（Key不可以是字典）</li>
<li>字典不可以下标索引，而是通过Key检索Value</li>
<li>每一份数据都是KeyValue键值对</li>
<li>支持for循环，不支持while循环</li>
<li>可以修改</li>
</ul>
<h1 id="数据容器的总结对比"><a href="#数据容器的总结对比" class="headerlink" title="数据容器的总结对比"></a>数据容器的总结对比</h1><table>
<thead>
<tr>
<th align="center"></th>
<th align="center">列表</th>
<th align="center">元素</th>
<th align="center">字符串</th>
<th align="center">集合</th>
<th align="center">字典</th>
</tr>
</thead>
<tbody><tr>
<td align="center">元素数量</td>
<td align="center">支持多个</td>
<td align="center">支持多个</td>
<td align="center">支持多个</td>
<td align="center">支持多个</td>
<td align="center">支持多个</td>
</tr>
<tr>
<td align="center">元素类型</td>
<td align="center">任意</td>
<td align="center">任意</td>
<td align="center">仅字符</td>
<td align="center">任意</td>
<td align="center">Key：除字典外任意类型，Value：任意类型</td>
</tr>
<tr>
<td align="center">下标索引</td>
<td align="center">支持</td>
<td align="center">支持</td>
<td align="center">支持</td>
<td align="center">不支持</td>
<td align="center">不支持</td>
</tr>
<tr>
<td align="center">重复元素</td>
<td align="center">支持</td>
<td align="center">支持</td>
<td align="center">支持</td>
<td align="center">不支持</td>
<td align="center">不支持</td>
</tr>
<tr>
<td align="center">可修改性</td>
<td align="center">支持</td>
<td align="center">不支持</td>
<td align="center">不支持</td>
<td align="center">支持</td>
<td align="center">支持</td>
</tr>
<tr>
<td align="center">数据有序</td>
<td align="center">是</td>
<td align="center">是</td>
<td align="center">是</td>
<td align="center">否</td>
<td align="center">否</td>
</tr>
<tr>
<td align="center">使用场景</td>
<td align="center">可修改，可重复的一批数据记录场景</td>
<td align="center">不可修改，可重复的一批数据记录场景</td>
<td align="center">一串字符的记录场景</td>
<td align="center">不可重复的数据记录场景</td>
<td align="center">以Key检索Value的数据记录场景</td>
</tr>
</tbody></table>
<h1 id="数据容器的通用操作"><a href="#数据容器的通用操作" class="headerlink" title="数据容器的通用操作"></a>数据容器的通用操作</h1><table>
<thead>
<tr>
<th align="center">功能</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">通过for循环</td>
<td align="center">遍历容器（字典是遍历Key）</td>
</tr>
<tr>
<td align="center">max()</td>
<td align="center">容器内最大元素</td>
</tr>
<tr>
<td align="center">min()</td>
<td align="center">容器内最小元素</td>
</tr>
<tr>
<td align="center">len()</td>
<td align="center">容器元素个数</td>
</tr>
<tr>
<td align="center">list()</td>
<td align="center">转换为列表</td>
</tr>
<tr>
<td align="center">tuple()</td>
<td align="center">转换为元组</td>
</tr>
<tr>
<td align="center">str()</td>
<td align="center">转换为字符串</td>
</tr>
<tr>
<td align="center">set()</td>
<td align="center">转换为集合</td>
</tr>
<tr>
<td align="center">sorted(序列,[reverse&#x3D;True])</td>
<td align="center">排序，reverse&#x3D;True表示降序得到一个排好序的列表</td>
</tr>
</tbody></table>
<h1 id="字符串大小比较方式"><a href="#字符串大小比较方式" class="headerlink" title="字符串大小比较方式"></a>字符串大小比较方式</h1><p>字符串比较：从头到尾，一位位比较，其中一位大，后面就无需比较了</p>
<p>单个字符比较：通过ASCII码表，确定字符对应的码值数字来确定大小</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Python基础(六)——文件操作</title>
    <url>/2023/08/17/Python%E5%9F%BA%E7%A1%80(%E5%85%AD)%E2%80%94%E2%80%94%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="文件的编码"><a href="#文件的编码" class="headerlink" title="文件的编码"></a>文件的编码</h1><ol>
<li><p>什么是编码？</p>
<p>编码是一种规则集合，记录了内容和二进制间进行相互转换的逻辑</p>
<p>编码有许多种，我们最常用的是UTF-8编码</p>
</li>
<li><p>为什么需要使用编码？</p>
<p>计算机只认识0和1，所以需要将内容翻译成0和1才能保存在计算机中。</p>
<p>同时也需要编码，将计算机保存的0和1，反向翻译回可以识别的内容。</p>
</li>
</ol>
<h1 id="文件的读取"><a href="#文件的读取" class="headerlink" title="文件的读取"></a>文件的读取</h1><p>操作汇总</p>
<table>
<thead>
<tr>
<th align="center">操作</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">文件对象 &#x3D; open(file,mode,encoding)</td>
<td align="center">打开文件获得文件对象</td>
</tr>
<tr>
<td align="center">文件对象.read(num)</td>
<td align="center">读取指定长度字节，不指定num则读取文件全部</td>
</tr>
<tr>
<td align="center">文件对象.readline()</td>
<td align="center">读取一行</td>
</tr>
<tr>
<td align="center">文件对象.readlines()</td>
<td align="center">读取全部行，得到列表</td>
</tr>
<tr>
<td align="center">for line in 文件对象</td>
<td align="center">for循环文件行，一次循环得到一行数据</td>
</tr>
<tr>
<td align="center">文件对象.close()</td>
<td align="center">关闭文件对象</td>
</tr>
<tr>
<td align="center">with open() as f</td>
<td align="center">通过with open语法打开文件，可以自动关闭</td>
</tr>
</tbody></table>
<h1 id="文件的写入"><a href="#文件的写入" class="headerlink" title="文件的写入"></a>文件的写入</h1><ol>
<li>写入文件使用open函数的”w“模式写入</li>
<li>写入的方法有：<ul>
<li>write()，写入内容</li>
<li>flush()，刷新内容到硬盘中</li>
</ul>
</li>
<li>注意事项：<ul>
<li>w模式，文件不存在，会创建新文件</li>
<li>w模式，文件存在，会清空原有内容</li>
<li>close()方法，带有flush()方法的功能</li>
</ul>
</li>
</ol>
<h1 id="文件的追加"><a href="#文件的追加" class="headerlink" title="文件的追加"></a>文件的追加</h1><ol>
<li>追加写入文件使用open函数的”a“模式写入</li>
<li>追加写入的方法有（和w模式一样）<ul>
<li>write()，写入内容</li>
<li>flush()，刷新内容到硬盘中</li>
</ul>
</li>
<li>注意事项：<ul>
<li>a模式，文件不存在，会创建新文件</li>
<li>a模式，文件存在，会在原有内容后面继续写入</li>
<li>可以使用”\n“来写出换行符</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/04/12/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>others</category>
      </categories>
  </entry>
</search>
